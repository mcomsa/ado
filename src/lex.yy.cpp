#line 2 "../lex.yy.cpp"

#line 4 "../lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

static const flex_int16_t yy_nxt[][128] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0
    },

    {
       29,   30,   30,   30,   30,   30,   30,   30,   30,   31,
       32,   31,   31,   31,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   33,   34,   35,   36,   37,   38,   30,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   50,   50,   50,   50,   50,   50,   51,   52,
       53,   54,   55,   30,   30,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   30,   58,   59,   56,   60,   61,   62,   63,
       64,   56,   65,   66,   56,   67,   56,   56,   68,   69,
       70,   71,   56,   72,   73,   74,   56,   75,   56,   56,
       76,   56,   56,   77,   78,   79,   80,   30
    },

    {
       29,   30,   30,   30,   30,   30,   30,   30,   30,   81,
       32,   81,   81,   81,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   81,   82,   34,   35,   36,   37,   38,   30,

       39,   40,   83,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   50,   50,   50,   50,   50,   50,   51,   52,
       53,   54,   55,   30,   30,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   30,   58,   59,   56,   60,   61,   62,   63,
       64,   56,   84,   66,   56,   67,   56,   56,   68,   69,
       70,   71,   56,   72,   73,   85,   56,   75,   56,   56,
       76,   56,   56,   77,   78,   79,   80,   30
    },

    {
       29,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       87,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   88,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86
    },

    {
       29,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       87,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   88,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86
    },

    {
       29,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       90,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89
    },

    {
       29,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       90,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89
    },

    {
       29,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       92,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   93,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   94,   91,   91,   91,   95,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   96,   91,   96,   91,   91
    },

    {
       29,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       92,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   93,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   94,   91,   91,   91,   95,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   96,   91,   96,   91,   91
    },

    {
       29,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       98,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   97,   97,
       97,   97,   97,   97,   97,   99,   99,   99,  100,   99,
       99,   99,   99,   99,   99,   99,  100,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   97,   97,   97,   97,   99,   97,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  101,   97,  101,   97,   97

    },

    {
       29,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       98,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   97,   97,
       97,   97,   97,   97,   97,   99,   99,   99,  100,   99,
       99,   99,   99,   99,   99,   99,  100,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   97,   97,   97,   97,   99,   97,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  101,   97,  101,   97,   97
    },

    {
       29,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      103,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  104,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  105,  102,  102,  102,  106,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  107,  102,  102
    },

    {
       29,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      103,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  104,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  105,  102,  102,  102,  106,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  107,  102,  102
    },

    {
       29,   30,   30,   30,   30,   30,   30,   30,   30,   31,

       32,   31,   31,   31,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   33,   30,   35,   30,   37,   38,   30,
       39,   40,   41,   42,   43,   44,   45,  108,   47,   48,
       49,   50,   50,   50,   50,   50,   50,   50,   51,   52,
       53,   54,   55,   30,   30,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   30,   58,   59,   56,   30,   61,   62,   63,
       64,   56,   65,  109,   56,   67,   56,   56,  110,   69,

      111,  112,   56,   72,   73,   74,   56,   75,  113,   56,
       76,   56,   56,  114,   78,   79,   80,   30
    },

    {
       29,   30,   30,   30,   30,   30,   30,   30,   30,   31,
       32,   31,   31,   31,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   82,   30,   35,   30,   37,   38,   30,
       39,   40,   41,   42,   43,   44,   45,  108,   47,   48,
       49,   50,   50,   50,   50,   50,   50,   50,   51,   52,
       53,   54,   55,   30,   30,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   30,   58,   59,   56,   30,   61,   62,   63,
       64,   56,   65,  109,   56,   67,   56,   56,  110,   69,
      111,  112,   56,   72,   73,   85,   56,   75,  113,   56,
       76,   56,   56,  114,   78,   79,   80,   30
    },

    {
       29,   30,   30,   30,   30,   30,   30,   30,   30,   31,
       32,   31,   31,   31,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   33,   30,   35,   30,   37,   38,   30,
       39,   40,   41,   42,   43,   44,   45,  108,   47,   48,

       49,   50,   50,   50,   50,   50,   50,   50,   51,   52,
       53,   54,   55,   30,   30,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   30,   58,   59,   56,   30,   61,   62,   63,
       64,   56,   65,   66,   56,   67,   56,   56,   68,   69,
       70,   71,   56,   72,   73,   74,  115,   75,   56,   56,
       76,   56,   56,  116,   78,   79,   80,   30
    },

    {
       29,   30,   30,   30,   30,   30,   30,   30,   30,   31,
       32,   31,   31,   31,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   31,   82,   30,   35,   30,   37,   38,   30,
       39,   40,   41,   42,   43,   44,   45,  108,   47,   48,
       49,   50,   50,   50,   50,   50,   50,   50,   51,   52,
       53,   54,   55,   30,   30,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   30,   58,   59,   56,   30,   61,   62,   63,
       64,   56,   65,   66,   56,   67,   56,   56,   68,   69,
       70,   71,   56,   72,   73,   85,  115,   75,   56,   56,

       76,   56,   56,  116,   78,   79,   80,   30
    },

    {
       29,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      118,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  119,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  120,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  121,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  122,  117,  123,  117,  117
    },

    {
       29,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      118,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  119,  117,  117,  117,  117,  117,
      117,  117,  124,  117,  117,  117,  117,  120,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  121,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  122,  117,  123,  117,  117
    },

    {
       29,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      126,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  127,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  128,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125

    },

    {
       29,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      126,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  127,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  128,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125
    },

    {
       29,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  131,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  132,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129
    },

    {
       29,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  131,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  132,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129
    },

    {
       29,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      134,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  135,  133,  133
    },

    {
       29,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      134,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  135,  133,  133
    },

    {
       29,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      137,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  138,  136,  139,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  140,  136,  136,  136,  141,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136
    },

    {
       29,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      137,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  138,  136,  139,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  140,  136,  136,  136,  141,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136
    },

    {
       29,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      143,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  144,  142,  145,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  146,  142,  142,  142,  147,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142
    },

    {
       29,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      143,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  144,  142,  145,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  146,  142,  142,  142,  147,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142
    },

    {
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,

      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29

    },

    {
       29,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,

      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30
    },

    {
       29,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  148,
      -31,  148,  148,  148,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  148,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,

      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31
    },

    {
       29,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,

      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32
    },

    {
       29,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,

      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  149,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,

      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33
    },

    {
       29,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,

      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34
    },

    {
       29,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  150,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,

      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35
    },

    {
       29,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,

      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  -36,  -36,  -36,  -36,  151,  -36,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  152,  -36,  -36,  -36,  -36
    },

    {
       29,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  153,  -37,  -37,  154,  155,
      156,  154,  154,  154,  154,  154,  157,  154,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,

      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  158,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  159,  -37
    },

    {
       29,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,

      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38
    },

    {
       29,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,

      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39

    },

    {
       29,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,

      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40
    },

    {
       29,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,

      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41
    },

    {
       29,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,

      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42
    },

    {
       29,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,

      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,

      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43
    },

    {
       29,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,

      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44
    },

    {
       29,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45
    },

    {
       29,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,

      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  161,  -46,  -46,  -46,  -46,  162,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,

      -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46
    },

    {
       29,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  163,  -47,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  165,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  166,  -47,

      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  165,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,
      166,  -47,  -47,  -47,  -47,  -47,  -47,  -47
    },

    {
       29,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  163,  -48,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  168,  -48,

      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  165,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  165,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48
    },

    {
       29,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,

      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  163,  -49,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  165,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  165,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  169,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49

    },

    {
       29,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  163,  -50,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  165,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,

      -50,  165,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50
    },

    {
       29,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,

      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51
    },

    {
       29,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,

      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  170,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52
    },

    {
       29,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,

      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  171,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,

      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53
    },

    {
       29,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  172,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,

      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54
    },

    {
       29,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,

      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  173,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55
    },

    {
       29,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,

      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -56,  -56,  -56,  -56,  174,  -56,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  -56,  -56,  -56,  -56,  -56
    },

    {
       29,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  175,
      -57,  175,  175,  175,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  175,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,

      -57,  -57,  -57,  -57,  -57,  -57,  -57,  176,  -57,  -57,
      -57,  -57,  176,  -57,  -57,  176,  -57,  -57,  -57,  -57,
      -57,  -57,  176,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57
    },

    {
       29,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,

      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58
    },

    {
       29,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,

      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59

    },

    {
       29,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  177,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,

      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60
    },

    {
       29,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -61,  -61,  -61,  -61,  174,  -61,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      178,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -61,  -61,  -61,  -61,  -61
    },

    {
       29,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  -62,

      179,  -62,  -62,  -62,  -62,  -62,  -62,  -62,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  -62,  -62,
      -62,  -62,  -62,  -62,  -62,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -62,  -62,  -62,  -62,  174,  -62,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      181,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  182,  174,  -62,  -62,  -62,  -62,  -62
    },

    {
       29,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,

      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  183,  -63,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -63,  -63,  -63,  -63,  174,  -63,  184,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  185,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -63,  -63,  -63,  -63,  -63
    },

    {
       29,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -64,  -64,  -64,  -64,  174,  -64,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  186,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -64,  -64,  -64,  -64,  -64
    },

    {
       29,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -65,  -65,  -65,  -65,  174,  -65,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  187,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -65,  -65,  -65,  -65,  -65
    },

    {
       29,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,

      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -66,  -66,  -66,  -66,  174,  -66,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  188,  174,  174,  174,  174,

      174,  174,  174,  -66,  -66,  -66,  -66,  -66
    },

    {
       29,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      189,  -67,  -67,  -67,  -67,  -67,  190,  -67,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  -67,  -67,  -67,  -67,  174,  -67,  174,  192,  174,
      174,  174,  193,  174,  174,  174,  174,  174,  174,  174,
      194,  195,  174,  174,  174,  174,  174,  174,  196,  174,
      174,  174,  174,  -67,  -67,  -67,  -67,  -67
    },

    {
       29,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -68,  -68,

      -68,  -68,  -68,  -68,  -68,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -68,  -68,  -68,  -68,  174,  -68,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  197,  174,  174,  198,  174,  174,  174,  174,  174,
      174,  174,  174,  -68,  -68,  -68,  -68,  -68
    },

    {
       29,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,

      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  199,  -69,
      -69,  -69,  -69,  -69,  -69,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -69,  -69,  -69,  -69,  174,  -69,  174,  174,  174,
      174,  200,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -69,  -69,  -69,  -69,  -69

    },

    {
       29,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -70,  -70,  -70,  -70,  174,  -70,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  201,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -70,  -70,  -70,  -70,  -70
    },

    {
       29,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      202,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -71,  -71,  -71,  -71,  174,  -71,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -71,  -71,  -71,  -71,  -71
    },

    {
       29,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,

      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -72,  -72,  -72,  -72,  174,  -72,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  204,  174,  174,
      174,  174,  174,  -72,  -72,  -72,  -72,  -72
    },

    {
       29,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,

      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -73,  -73,  -73,  -73,  174,  -73,  174,  174,  174,
      174,  205,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -73,  -73,  -73,  -73,  -73
    },

    {
       29,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -74,  -74,  -74,  -74,  174,  -74,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  206,  174,  174,  174,
      174,  174,  174,  -74,  -74,  -74,  -74,  -74
    },

    {
       29,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -75,  -75,  -75,  -75,  174,  -75,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  207,  174,  174,  174,  174,
      174,  174,  174,  -75,  -75,  -75,  -75,  -75
    },

    {
       29,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,

      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -76,  -76,  -76,  -76,  174,  -76,  174,  174,  174,
      174,  174,  174,  174,  174,  208,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  -76,  -76,  -76,  -76,  -76
    },

    {
       29,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,

      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  209,  -77,  -77,  -77,  -77
    },

    {
       29,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,

      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78
    },

    {
       29,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,

      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79

    },

    {
       29,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  210,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,

      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80
    },

    {
       29,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  211,
      -81,  211,  211,  211,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  211,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,

      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  212,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81
    },

    {
       29,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      214,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  215,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213
    },

    {
       29,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,

      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,

      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83
    },

    {
       29,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -84,  -84,  -84,  -84,  174,  -84,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  187,  174,
      174,  216,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  -84,  -84,  -84,  -84,  -84
    },

    {
       29,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  -85,  -85,  -85,  -85,  174,  -85,  174,  174,  174,
      174,  174,  174,  174,  217,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  206,  174,  174,  174,
      174,  174,  174,  -85,  -85,  -85,  -85,  -85
    },

    {
       29,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      -86,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  -86,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218
    },

    {
       29,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      219,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,

      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87
    },

    {
       29,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  220,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,

      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88
    },

    {
       29,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      -89,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221

    },

    {
       29,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,

      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90
    },

    {
       29,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      -91,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  -91,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  -91,  222,  222,  222,  -91,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  -91,  222,  -91,  222,  222
    },

    {
       29,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,

      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92
    },

    {
       29,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,

      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,

      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93
    },

    {
       29,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      -94,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223
    },

    {
       29,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,

      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95
    },

    {
       29,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,

      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,

      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96
    },

    {
       29,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,

      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97
    },

    {
       29,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,

      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98
    },

    {
       29,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,

      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  -99,  -99,  -99,  -99,  224,  -99,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  -99,  -99,  -99,  -99,  -99

    },

    {
       29, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224, -100, -100,
     -100, -100, -100, -100, -100,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224, -100, -100, -100, -100,  224, -100,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224, -100, -100, -100, -100, -100
    },

    {
       29, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,

     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101
    },

    {
       29,  225,  225,  225,  225,  225,  225,  225,  225,  225,
     -102,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225, -102,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225, -102,  225,  225,  225, -102,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225, -102,  225,  225
    },

    {
       29, -103, -103, -103, -103, -103, -103, -103, -103, -103,

     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,

     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103
    },

    {
       29, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226, -104, -104,
     -104, -104, -104, -104, -104,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226, -104, -104, -104, -104,  226, -104,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  227, -104, -104, -104, -104
    },

    {
       29,  228,  228,  228,  228,  228,  228,  228,  228,  228,
     -105,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228
    },

    {
       29, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,

     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,

     -106, -106, -106, -106, -106, -106, -106, -106
    },

    {
       29, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,

     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
     -107, -107, -107, -107, -107, -107, -107, -107
    },

    {
       29, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108,  229, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,

     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108
    },

    {
       29, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,

     -109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109, -109, -109,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -109, -109,
     -109, -109, -109, -109, -109,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -109, -109, -109, -109,  174, -109,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  230,  174,
      174,  174,  174,  174,  174,  188,  174,  174,  174,  174,
      174,  174,  174, -109, -109, -109, -109, -109

    },

    {
       29, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110, -110, -110,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -110, -110,
     -110, -110, -110, -110, -110,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -110, -110, -110, -110,  174, -110,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  231,  174,  174,  198,  174,  174,  174,  174,  174,
      174,  174,  174, -110, -110, -110, -110, -110
    },

    {
       29, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111, -111, -111,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -111, -111,
     -111, -111, -111, -111, -111,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -111, -111, -111, -111,  174, -111,  174,  174,  174,
      174,  232,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  201,  174,  174,  174,  174,  174,  233,  174,  174,
      174,  174,  174, -111, -111, -111, -111, -111
    },

    {
       29, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112, -112, -112, -112, -112, -112, -112,

      202, -112, -112, -112, -112, -112, -112, -112,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203, -112, -112,
     -112, -112, -112, -112, -112,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -112, -112, -112, -112,  174, -112,  174,  174,  174,
      174,  174,  234,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -112, -112, -112, -112, -112
    },

    {
       29, -113, -113, -113, -113, -113, -113, -113, -113, -113,

     -113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113, -113, -113, -113, -113,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -113, -113,
     -113, -113, -113, -113, -113,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -113, -113, -113, -113,  174, -113,  235,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -113, -113, -113, -113, -113
    },

    {
       29, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,

     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114, -114, -114
    },

    {
       29, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115, -115, -115,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -115, -115,
     -115, -115, -115, -115, -115,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -115, -115, -115, -115,  174, -115,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  236,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -115, -115, -115, -115, -115
    },

    {
       29, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,

     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116, -116, -116, -116, -116,

     -116, -116, -116, -116, -116, -116, -116, -116
    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -117,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237, -117,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -117,  237, -117,  237,  237
    },

    {
       29, -118, -118, -118, -118, -118, -118, -118, -118, -118,
      238, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,

     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118, -118, -118
    },

    {
       29, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,

     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119, -119, -119

    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -120,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237, -120,  237,  237,  237,  237,  237,
      237,  237,  239,  237,  237,  237,  237,  240,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -120,  237, -120,  237,  237
    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -121,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  241,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -121,  237, -121,  237,  237
    },

    {
       29, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,

     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122, -122, -122
    },

    {
       29, -123, -123, -123, -123, -123, -123, -123, -123, -123,

     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,

     -123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123, -123, -123
    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -124,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237, -124,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -124,  237, -124,  237,  237
    },

    {
       29,  242,  242,  242,  242,  242,  242,  242,  242,  242,
     -125,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242, -125,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242, -125,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242
    },

    {
       29, -126, -126, -126, -126, -126, -126, -126, -126, -126,
      243, -126, -126, -126, -126, -126, -126, -126, -126, -126,

     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126, -126, -126, -126, -126,

     -126, -126, -126, -126, -126, -126, -126, -126
    },

    {
       29, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,

     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127, -127, -127, -127, -127
    },

    {
       29, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128,  244, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,

     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128, -128, -128
    },

    {
       29,  245,  245,  245,  245,  245,  245,  245,  245,  245,
     -129,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245, -129,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245, -129,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245

    },

    {
       29, -130, -130, -130, -130, -130, -130, -130, -130, -130,
      246, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,

     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130
    },

    {
       29,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  248,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247
    },

    {
       29, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132,  249, -132, -132, -132, -132, -132,

     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132
    },

    {
       29,  250,  250,  250,  250,  250,  250,  250,  250,  250,

     -133,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250, -133,  250,  250
    },

    {
       29, -134, -134, -134, -134, -134, -134, -134, -134, -134,
      251, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,

     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134
    },

    {
       29,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  253,  252,  252
    },

    {
       29,  254,  254,  254,  254,  254,  254,  254,  254,  254,
     -136,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254, -136,  254, -136,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254, -136,  254,  254,  254, -136,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254
    },

    {
       29, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,

     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137
    },

    {
       29, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,

     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138, -138, -138, -138, -138
    },

    {
       29, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,

     -139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139, -139, -139, -139, -139,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255, -139, -139,
     -139, -139, -139, -139, -139,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255, -139, -139, -139, -139,  255, -139,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  256, -139, -139, -139, -139

    },

    {
       29,  257,  257,  257,  257,  257,  257,  257,  257,  257,
     -140,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  258,  257,  259,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  260,  257,  261,  257,

      257,  257,  262,  257,  257,  257,  257,  257,  257,  257,
      263,  257,  257,  257,  264,  257,  265,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257
    },

    {
       29, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,

     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141, -141, -141, -141, -141
    },

    {
       29,  266,  266,  266,  266,  266,  266,  266,  266,  266,
     -142,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266, -142,  266, -142,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266, -142,  266,  266,  266, -142,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266
    },

    {
       29, -143, -143, -143, -143, -143, -143, -143, -143, -143,

     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,

     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143
    },

    {
       29,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  268,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267
    },

    {
       29, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269, -145, -145,
     -145, -145, -145, -145, -145,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269, -145, -145, -145, -145,  269, -145,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  270, -145, -145, -145, -145
    },

    {
       29,  271,  271,  271,  271,  271,  271,  271,  271,  271,
     -146,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  272,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  273,  271,  274,  271,
      271,  271,  275,  271,  271,  271,  271,  271,  271,  271,
      276,  271,  271,  271,  277,  271,  278,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271
    },

    {
       29, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,

     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147
    },

    {
       29, -148, -148, -148, -148, -148, -148, -148, -148,  148,
     -148,  148,  148,  148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148,  148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,

     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148
    },

    {
       29, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,

     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149

    },

    {
       29, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,

     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150
    },

    {
       29, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151, -151, -151,
     -151, -151, -151, -151, -151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151, -151, -151, -151, -151,  151, -151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151, -151, -151, -151, -151, -151
    },

    {
       29, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,

     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152
    },

    {
       29, -153, -153, -153, -153, -153, -153, -153, -153, -153,

     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,

     -153, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153, -153, -153
    },

    {
       29, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154,  279, -154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,

     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154,  280, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154
    },

    {
       29, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155,  279, -155,  154,  154,

      154,  154,  154,  154,  281,  154,  154,  154, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155,  280, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155
    },

    {
       29, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,

     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156,  279, -156,  154,  282,
      154,  154,  154,  154,  154,  154,  154,  154, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156,  280, -156, -156, -156, -156,

     -156, -156, -156, -156, -156, -156, -156, -156
    },

    {
       29, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157,  279, -157,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157,  283, -157, -157, -157,  283, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,

     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157,  280, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157
    },

    {
       29, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,

     -158, -158, -158, -158, -158, -158, -158,  284, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158,  284,
      284, -158, -158, -158,  284, -158, -158, -158, -158,  284,
     -158, -158, -158,  284, -158, -158, -158, -158, -158,  284,
     -158, -158, -158, -158, -158, -158, -158, -158
    },

    {
       29, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,

     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159

    },

    {
       29, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160,  286,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,

     -160,  286, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160
    },

    {
       29, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,

     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161
    },

    {
       29, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,

     -162, -162, -162, -162, -162, -162, -162,  287, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162
    },

    {
       29,  288,  288,  288,  288,  288,  288,  288,  288,  288,

      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  288,  288,
      288,  288,  288,  288,  288, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163,  288,  288,  288,  288, -163,  288, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,

     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163,  288,  288,  288,  288,  288
    },

    {
       29, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164,  163, -164,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290, -164, -164,
     -164, -164, -164, -164, -164,  291, -164, -164,  292,  165,
      293, -164, -164, -164,  294, -164, -164,  295,  296,  297,

     -164, -164, -164,  298, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164,  291, -164, -164,
      292,  165,  293, -164, -164, -164,  294, -164, -164,  295,
      296,  297, -164, -164, -164,  298, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164, -164
    },

    {
       29, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165,  299, -165,  299, -165, -165,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165
    },

    {
       29, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,

     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301, -166, -166,
     -166, -166, -166, -166, -166,  301,  301,  301,  301,  301,
      301, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166,  301,  301,  301,
      301,  301,  301, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,

     -166, -166, -166, -166, -166, -166, -166, -166
    },

    {
       29, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167,  163, -167,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302, -167, -167,
     -167, -167, -167, -167, -167,  291, -167, -167,  292,  165,
      293, -167, -167, -167,  294, -167, -167,  295,  296,  297,
     -167, -167, -167,  298, -167, -167, -167, -167, -167, -167,

     -167, -167, -167, -167, -167, -167, -167,  291, -167, -167,
      292,  165,  293, -167, -167, -167,  294, -167, -167,  295,
      296,  297, -167, -167, -167,  298, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167
    },

    {
       29, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168,  303,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,

     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168,  303,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168
    },

    {
       29, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,

     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169,  304, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169

    },

    {
       29, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170,  170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,

     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170
    },

    {
       29, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,

     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171
    },

    {
       29, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,

     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172
    },

    {
       29, -173, -173, -173, -173, -173, -173, -173, -173, -173,

     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,

     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173
    },

    {
       29, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174, -174, -174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -174, -174,
     -174, -174, -174, -174, -174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -174, -174, -174, -174,  174, -174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -174, -174, -174, -174, -174
    },

    {
       29, -175, -175, -175, -175, -175, -175, -175, -175,  175,
     -175,  175,  175,  175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175,  175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,

     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175,  176, -175, -175,
     -175, -175,  176, -175, -175,  176, -175, -175, -175, -175,
     -175, -175,  176, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175, -175, -175
    },

    {
       29, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,

     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176, -176, -176, -176,  305,

     -176, -176, -176, -176, -176, -176, -176, -176
    },

    {
       29, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,

     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177, -177, -177, -177, -177
    },

    {
       29, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178, -178, -178,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -178, -178,

     -178, -178, -178, -178, -178,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -178, -178, -178, -178,  174, -178,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  306,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -178, -178, -178, -178, -178
    },

    {
       29, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,

     -179, -179, -179, -179, -179,  307, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179,  308, -179, -179, -179, -179, -179,  309, -179,
     -179, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179, -179, -179

    },

    {
       29, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180, -180, -180,  310, -180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180, -180, -180,
     -180, -180, -180, -180, -180,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -180, -180, -180, -180,  174, -180,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -180, -180, -180, -180, -180
    },

    {
       29, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181,  311, -181,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -181, -181,
     -181, -181, -181, -181, -181,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -181, -181, -181, -181,  174, -181,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -181, -181, -181, -181, -181
    },

    {
       29, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182, -182, -182, -182, -182,

     -182, -182, -182, -182, -182, -182, -182, -182,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -182, -182,
     -182, -182, -182, -182, -182,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -182, -182, -182, -182,  174, -182,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  312,  313,  174,  174,  174,
      174,  174,  174, -182, -182, -182, -182, -182
    },

    {
       29, -183, -183, -183, -183, -183, -183, -183, -183, -183,

     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,

     -183, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183, -183, -183
    },

    {
       29, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184, -184, -184, -184, -184,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -184, -184,
     -184, -184, -184, -184, -184,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -184, -184, -184, -184,  174, -184,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  314,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -184, -184, -184, -184, -184
    },

    {
       29, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185, -185, -185,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -185, -185,
     -185, -185, -185, -185, -185,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -185, -185, -185, -185,  174, -185,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  315,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -185, -185, -185, -185, -185
    },

    {
       29, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,

     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186, -186, -186,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -186, -186,
     -186, -186, -186, -186, -186,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -186, -186, -186, -186,  174, -186,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  316,  174,  174,

      174,  174,  174, -186, -186, -186, -186, -186
    },

    {
       29, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187, -187, -187, -187, -187,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -187, -187,
     -187, -187, -187, -187, -187,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -187, -187, -187, -187,  174, -187,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  317,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -187, -187, -187, -187, -187
    },

    {
       29, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188, -188, -188,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -188, -188,

     -188, -188, -188, -188, -188,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -188, -188, -188, -188,  174, -188,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  318,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -188, -188, -188, -188, -188
    },

    {
       29, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,

     -189, -189,  319, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189, -189, -189

    },

    {
       29, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,

     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190, -190, -190
    },

    {
       29, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191,  321, -191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191, -191, -191,
     -191, -191, -191, -191, -191,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -191, -191, -191, -191,  174, -191,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -191, -191, -191, -191, -191
    },

    {
       29, -192, -192, -192, -192, -192, -192, -192, -192, -192,
     -192, -192, -192, -192, -192, -192, -192, -192, -192, -192,
     -192, -192, -192, -192, -192, -192, -192, -192, -192, -192,
     -192, -192, -192, -192, -192, -192, -192, -192, -192, -192,

      179, -192, -192, -192, -192, -192, -192, -192,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180, -192, -192,
     -192, -192, -192, -192, -192,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -192, -192, -192, -192,  174, -192,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      181,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -192, -192, -192, -192, -192
    },

    {
       29, -193, -193, -193, -193, -193, -193, -193, -193, -193,

     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193, -193, -193, -193, -193,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -193, -193,
     -193, -193, -193, -193, -193,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -193, -193, -193, -193,  174, -193,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -193, -193, -193, -193, -193
    },

    {
       29, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194, -194, -194,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -194, -194,
     -194, -194, -194, -194, -194,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -194, -194, -194, -194,  174, -194,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  322,  174,  174,  174,
      174,  174,  174, -194, -194, -194, -194, -194
    },

    {
       29, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
      202, -195, -195, -195, -195, -195, -195, -195,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  203, -195, -195,
     -195, -195, -195, -195, -195,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -195, -195, -195, -195,  174, -195,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -195, -195, -195, -195, -195
    },

    {
       29, -196, -196, -196, -196, -196, -196, -196, -196, -196,
     -196, -196, -196, -196, -196, -196, -196, -196, -196, -196,

     -196, -196, -196, -196, -196, -196, -196, -196, -196, -196,
     -196, -196, -196, -196, -196, -196, -196, -196, -196, -196,
     -196, -196, -196, -196, -196, -196, -196, -196,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -196, -196,
     -196, -196, -196, -196, -196,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -196, -196, -196, -196,  174, -196,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  323,  174,  174,  174,  174,  174,

      174,  174,  174, -196, -196, -196, -196, -196
    },

    {
       29, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -197, -197,
     -197, -197, -197, -197, -197,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -197, -197, -197, -197,  174, -197,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      324,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -197, -197, -197, -197, -197
    },

    {
       29, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198, -198, -198,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -198, -198,

     -198, -198, -198, -198, -198,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -198, -198, -198, -198,  174, -198,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  325,  174,  174,  174,
      174,  174,  174, -198, -198, -198, -198, -198
    },

    {
       29, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,

     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199,  303,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199, -199,  303,
     -199, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199, -199, -199

    },

    {
       29, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200, -200, -200,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -200, -200,
     -200, -200, -200, -200, -200,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -200, -200, -200, -200,  174, -200,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  326,  174,  174,  174,  174,  174,
      174,  174,  174, -200, -200, -200, -200, -200
    },

    {
       29, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201, -201, -201,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -201, -201,
     -201, -201, -201, -201, -201,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -201, -201, -201, -201,  174, -201,  174,  174,  174,
      174,  174,  174,  174,  174,  327,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -201, -201, -201, -201, -201
    },

    {
       29, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202,  328, -202, -202, -202, -202, -202, -202, -202,

     -202, -202, -202, -202, -202, -202, -202, -202,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202
    },

    {
       29, -203, -203, -203, -203, -203, -203, -203, -203, -203,

     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203,  330, -203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203, -203, -203,
     -203, -203, -203, -203, -203,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -203, -203, -203, -203,  174, -203,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -203, -203, -203, -203, -203
    },

    {
       29, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -204, -204,
     -204, -204, -204, -204, -204,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -204, -204, -204, -204,  174, -204,  174,  174,  174,
      174,  174,  174,  174,  174,  331,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -204, -204, -204, -204, -204
    },

    {
       29, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -205, -205,
     -205, -205, -205, -205, -205,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -205, -205, -205, -205,  174, -205,  174,  174,  332,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -205, -205, -205, -205, -205
    },

    {
       29, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,

     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -206, -206,
     -206, -206, -206, -206, -206,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -206, -206, -206, -206,  174, -206,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  333,  174,  174,  174,  174,  174,

      174,  174,  174, -206, -206, -206, -206, -206
    },

    {
       29, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -207, -207,
     -207, -207, -207, -207, -207,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -207, -207, -207, -207,  174, -207,  174,  174,  174,
      174,  174,  174,  174,  174,  334,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -207, -207, -207, -207, -207
    },

    {
       29, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -208, -208,

     -208, -208, -208, -208, -208,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -208, -208, -208, -208,  174, -208,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -208, -208, -208, -208, -208
    },

    {
       29, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,

     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209,  335, -209, -209, -209, -209

    },

    {
       29, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,

     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210
    },

    {
       29, -211, -211, -211, -211, -211, -211, -211, -211,  211,
     -211,  211,  211,  211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211,  211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,

     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211,  212, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211
    },

    {
       29, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,

     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212,  336, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212
    },

    {
       29,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      214,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213
    },

    {
       29, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,

     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214
    },

    {
       29,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      214,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213
    },

    {
       29, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,

     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -216, -216,
     -216, -216, -216, -216, -216,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -216, -216, -216, -216,  174, -216,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  337,  174,  174,  174,  174,  174,

      174,  174,  174, -216, -216, -216, -216, -216
    },

    {
       29, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217, -217, -217, -217, -217,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -217, -217,
     -217, -217, -217, -217, -217,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -217, -217, -217, -217,  174, -217,  174,  174,  174,
      174,  338,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -217, -217, -217, -217, -217
    },

    {
       29,  218,  218,  218,  218,  218,  218,  218,  218,  218,
     -218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218, -218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218
    },

    {
       29, -219, -219, -219, -219, -219, -219, -219, -219, -219,
      219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,

     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219

    },

    {
       29, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,

     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220
    },

    {
       29,  221,  221,  221,  221,  221,  221,  221,  221,  221,
     -221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221
    },

    {
       29,  222,  222,  222,  222,  222,  222,  222,  222,  222,
     -222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222, -222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222, -222,  222,  222,  222, -222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222, -222,  222, -222,  222,  222
    },

    {
       29, -223, -223, -223, -223, -223, -223, -223, -223, -223,

     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,

     -223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223, -223, -223
    },

    {
       29, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224, -224, -224, -224, -224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224, -224, -224,
     -224, -224, -224, -224, -224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224, -224, -224, -224, -224,  224, -224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224, -224, -224, -224, -224, -224
    },

    {
       29,  225,  225,  225,  225,  225,  225,  225,  225,  225,
     -225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225, -225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225, -225,  225,  225,  225, -225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225, -225,  225,  225
    },

    {
       29, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,

     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226, -226, -226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226, -226, -226,
     -226, -226, -226, -226, -226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226, -226, -226, -226, -226,  226, -226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226, -226, -226, -226, -226, -226
    },

    {
       29, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,

     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227, -227, -227, -227, -227
    },

    {
       29, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,

     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228
    },

    {
       29, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,

     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229,  287, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229

    },

    {
       29, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -230, -230,
     -230, -230, -230, -230, -230,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -230, -230, -230, -230,  174, -230,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  339,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -230, -230, -230, -230, -230
    },

    {
       29, -231, -231, -231, -231, -231, -231, -231, -231, -231,
     -231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
     -231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
     -231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
     -231, -231, -231, -231, -231, -231, -231, -231,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -231, -231,
     -231, -231, -231, -231, -231,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -231, -231, -231, -231,  174, -231,  174,  174,  340,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      324,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -231, -231, -231, -231, -231
    },

    {
       29, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232, -232, -232, -232, -232,

     -232, -232, -232, -232, -232, -232, -232, -232,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -232, -232,
     -232, -232, -232, -232, -232,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -232, -232, -232, -232,  174, -232,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  341,
      174,  174,  174, -232, -232, -232, -232, -232
    },

    {
       29, -233, -233, -233, -233, -233, -233, -233, -233, -233,

     -233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
     -233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
     -233, -233, -233, -233, -233, -233, -233, -233, -233, -233,
     -233, -233, -233, -233, -233, -233, -233, -233,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -233, -233,
     -233, -233, -233, -233, -233,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -233, -233, -233, -233,  174, -233,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  342,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -233, -233, -233, -233, -233
    },

    {
       29, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234, -234, -234,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -234, -234,
     -234, -234, -234, -234, -234,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -234, -234, -234, -234,  174, -234,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -234, -234, -234, -234, -234
    },

    {
       29, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235, -235, -235,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -235, -235,
     -235, -235, -235, -235, -235,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -235, -235, -235, -235,  174, -235,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  343,  174,  174,  174,  174,  174,
      174,  174,  174, -235, -235, -235, -235, -235
    },

    {
       29, -236, -236, -236, -236, -236, -236, -236, -236, -236,
     -236, -236, -236, -236, -236, -236, -236, -236, -236, -236,

     -236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
     -236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
     -236, -236, -236, -236, -236, -236, -236, -236,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -236, -236,
     -236, -236, -236, -236, -236,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -236, -236, -236, -236,  174, -236,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -236, -236, -236, -236, -236
    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237, -237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -237,  237, -237,  237,  237
    },

    {
       29, -238, -238, -238, -238, -238, -238, -238, -238, -238,
      238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,

     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238, -238, -238
    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -239,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237, -239,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -239,  237, -239,  237,  237

    },

    {
       29,  237,  237,  237,  237,  237,  237,  237,  237,  237,
     -240,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237, -240,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237, -240,  237, -240,  237,  237
    },

    {
       29, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,

     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241, -241, -241
    },

    {
       29,  242,  242,  242,  242,  242,  242,  242,  242,  242,
     -242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242, -242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242, -242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242
    },

    {
       29, -243, -243, -243, -243, -243, -243, -243, -243, -243,

      243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,

     -243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243, -243, -243
    },

    {
       29, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,

     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244, -244, -244
    },

    {
       29,  245,  245,  245,  245,  245,  245,  245,  245,  245,
     -245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245, -245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245, -245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245
    },

    {
       29, -246, -246, -246, -246, -246, -246, -246, -246, -246,
      246, -246, -246, -246, -246, -246, -246, -246, -246, -246,

     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246, -246, -246, -246, -246,

     -246, -246, -246, -246, -246, -246, -246, -246
    },

    {
       29,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247, -247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247
    },

    {
       29, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,

     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248, -248, -248
    },

    {
       29, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,

     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249, -249, -249

    },

    {
       29,  250,  250,  250,  250,  250,  250,  250,  250,  250,
     -250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250, -250,  250,  250
    },

    {
       29, -251, -251, -251, -251, -251, -251, -251, -251, -251,
      251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,

     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251
    },

    {
       29, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,

     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252
    },

    {
       29,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  345,  344,  344
    },

    {
       29,  254,  254,  254,  254,  254,  254,  254,  254,  254,
     -254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254, -254,  254, -254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254, -254,  254,  254,  254, -254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254
    },

    {
       29, -255, -255, -255, -255, -255, -255, -255, -255, -255,
     -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
     -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
     -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
     -255, -255, -255, -255, -255, -255, -255, -255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255, -255, -255,
     -255, -255, -255, -255, -255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255, -255, -255, -255, -255,  255, -255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255, -255, -255, -255, -255, -255
    },

    {
       29, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,

     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256, -256, -256, -256, -256,

     -256, -256, -256, -256, -256, -256, -256, -256
    },

    {
       29, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,

     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257, -257, -257, -257, -257
    },

    {
       29, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,

     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258, -258, -258
    },

    {
       29, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,

     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259, -259, -259

    },

    {
       29, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,

     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260
    },

    {
       29, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,

     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261, -261, -261
    },

    {
       29, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,

     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262, -262, -262
    },

    {
       29, -263, -263, -263, -263, -263, -263, -263, -263, -263,

     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,

     -263, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263, -263, -263
    },

    {
       29, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,

     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264, -264, -264
    },

    {
       29, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,

     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265, -265, -265
    },

    {
       29,  266,  266,  266,  266,  266,  266,  266,  266,  266,
     -266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266, -266,  266, -266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266, -266,  266,  266,  266, -266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266
    },

    {
       29,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267, -267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267
    },

    {
       29, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,

     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268, -268, -268
    },

    {
       29, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269, -269, -269, -269, -269,

     -269, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269, -269, -269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269, -269, -269,
     -269, -269, -269, -269, -269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269, -269, -269, -269, -269,  269, -269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269, -269, -269, -269, -269, -269

    },

    {
       29, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,

     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270, -270, -270
    },

    {
       29, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,

     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271, -271, -271
    },

    {
       29, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,

     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272, -272, -272
    },

    {
       29, -273, -273, -273, -273, -273, -273, -273, -273, -273,

     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,

     -273, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273, -273, -273
    },

    {
       29, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,

     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274, -274, -274
    },

    {
       29, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,

     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275, -275, -275
    },

    {
       29, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,

     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276, -276, -276, -276, -276,

     -276, -276, -276, -276, -276, -276, -276, -276
    },

    {
       29, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,

     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277, -277, -277, -277, -277
    },

    {
       29, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,

     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278, -278, -278
    },

    {
       29, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,

     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279, -279, -279

    },

    {
       29, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,

     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280, -280, -280
    },

    {
       29, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281,  279, -281,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,

     -281, -281,  283, -281, -281, -281,  283, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281,  280, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281, -281, -281
    },

    {
       29, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,

     -282, -282, -282, -282, -282, -282,  279, -282,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282,  280, -282, -282, -282, -282,
      283, -282, -282, -282, -282, -282, -282, -282
    },

    {
       29, -283, -283, -283, -283, -283, -283, -283, -283, -283,

     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,

     -283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283, -283, -283
    },

    {
       29, -284, -284, -284, -284, -284, -284, -284, -284, -284,
     -284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
     -284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
     -284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
     -284, -284, -284,  347,  347,  347,  347,  347, -284, -284,
     -284, -284, -284, -284, -284, -284, -284, -284,  347, -284,
     -284, -284, -284, -284, -284,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347, -284,  347, -284, -284,  347, -284,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347, -284, -284, -284, -284, -284
    },

    {
       29, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285,  280, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285, -285, -285
    },

    {
       29, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,

     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286,  348, -286,  348, -286, -286,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,

     -286, -286, -286, -286, -286, -286, -286, -286
    },

    {
       29, -287, -287, -287, -287, -287, -287, -287, -287, -287,
      350, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,

     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
     -287, -287, -287, -287, -287, -287, -287, -287
    },

    {
       29, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,

     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288, -288, -288, -288, -288
    },

    {
       29,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,

      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  288,  288,
      288,  288,  288,  288,  288, -289, -289, -289, -289,  286,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289,  288,  288,  288,  288, -289,  288, -289, -289, -289,
     -289,  286, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289,  288,  288,  288,  288,  288

    },

    {
       29, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290,  163, -290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290,  165,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,

     -290,  165, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290
    },

    {
       29, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,

     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
      351, -291, -291, -291, -291,  352, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291,  351, -291, -291, -291, -291,  352, -291, -291,
     -291, -291, -291, -291, -291, -291, -291, -291
    },

    {
       29, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,

     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292,  353,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292,  353, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292, -292, -292
    },

    {
       29, -293, -293, -293, -293, -293, -293, -293, -293, -293,

     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293,  354,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293,  354, -293, -293, -293, -293, -293, -293, -293, -293,

     -293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293, -293, -293
    },

    {
       29, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294,  355, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,

     -294, -294, -294, -294, -294,  356, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294,  355, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294, -294,  356, -294, -294,
     -294, -294, -294, -294, -294, -294, -294, -294
    },

    {
       29, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,

     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295,  357, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295,  357, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295, -295, -295
    },

    {
       29, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,

     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296,  358,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296,  358, -296, -296, -296, -296, -296, -296, -296, -296,

     -296, -296, -296, -296, -296, -296, -296, -296
    },

    {
       29, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297,  359, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,

     -297, -297, -297, -297, -297, -297, -297, -297, -297,  359,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297, -297, -297, -297, -297
    },

    {
       29, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,

     -298, -298, -298, -298, -298, -298, -298, -298, -298,  360,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298,  360, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298, -298, -298
    },

    {
       29, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,

     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299, -299, -299

    },

    {
       29, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,

     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300, -300, -300
    },

    {
       29, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301, -301, -301,
     -301, -301, -301, -301, -301,  301,  301,  301,  301,  301,

      301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301,  301,  301,  301,
      301,  301,  301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301, -301, -301
    },

    {
       29, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,

     -302, -302, -302, -302, -302, -302,  163, -302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302,  165,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302,  165, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302, -302, -302
    },

    {
       29, -303, -303, -303, -303, -303, -303, -303, -303, -303,

     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,

     -303, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303, -303, -303
    },

    {
       29, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,

     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304,  361, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304, -304, -304
    },

    {
       29, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,

     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305,  362, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305, -305, -305
    },

    {
       29, -306, -306, -306, -306, -306, -306, -306, -306, -306,
     -306, -306, -306, -306, -306, -306, -306, -306, -306, -306,

     -306, -306, -306, -306, -306, -306, -306, -306, -306, -306,
     -306, -306, -306, -306, -306, -306, -306, -306, -306, -306,
     -306, -306, -306, -306, -306, -306, -306, -306,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -306, -306,
     -306, -306, -306, -306, -306,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -306, -306, -306, -306,  174, -306,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  363,  174,

      174,  174,  174, -306, -306, -306, -306, -306
    },

    {
       29, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,

     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307, -307, -307, -307, -307
    },

    {
       29, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,

     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308,  365, -308, -308, -308, -308,
     -308, -308, -308, -308,  366, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308, -308, -308
    },

    {
       29, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,

     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309,  367, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309, -309, -309

    },

    {
       29, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,

     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310, -310, -310
    },

    {
       29, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,

     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311, -311, -311
    },

    {
       29, -312, -312, -312, -312, -312, -312, -312, -312, -312,
     -312, -312, -312, -312, -312, -312, -312, -312, -312, -312,
     -312, -312, -312, -312, -312, -312, -312, -312, -312, -312,
     -312, -312, -312, -312, -312, -312, -312, -312, -312, -312,

     -312, -312, -312, -312, -312, -312, -312, -312,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -312, -312,
     -312, -312, -312, -312, -312,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -312, -312, -312, -312,  174, -312,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  368,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -312, -312, -312, -312, -312
    },

    {
       29, -313, -313, -313, -313, -313, -313, -313, -313, -313,

     -313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
     -313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
     -313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
     -313, -313, -313, -313, -313, -313, -313, -313,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -313, -313,
     -313, -313, -313, -313, -313,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -313, -313, -313, -313,  174, -313,  174,  174,  174,
      174,  369,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -313, -313, -313, -313, -313
    },

    {
       29, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314, -314, -314,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -314, -314,
     -314, -314, -314, -314, -314,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -314, -314, -314, -314,  174, -314,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  370,  174,  174,  174,
      174,  174,  174, -314, -314, -314, -314, -314
    },

    {
       29, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315, -315, -315,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -315, -315,
     -315, -315, -315, -315, -315,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -315, -315, -315, -315,  174, -315,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  371,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -315, -315, -315, -315, -315
    },

    {
       29, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316, -316, -316, -316, -316,

     -316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316, -316, -316,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -316, -316,
     -316, -316, -316, -316, -316,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -316, -316, -316, -316,  174, -316,  174,  372,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -316, -316, -316, -316, -316
    },

    {
       29, -317, -317, -317, -317, -317, -317, -317, -317, -317,
     -317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
     -317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
     -317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
     -317, -317, -317, -317, -317, -317, -317, -317,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -317, -317,
     -317, -317, -317, -317, -317,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -317, -317, -317, -317,  174, -317,  373,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -317, -317, -317, -317, -317
    },

    {
       29, -318, -318, -318, -318, -318, -318, -318, -318, -318,
     -318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
     -318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
     -318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
     -318, -318, -318, -318, -318, -318, -318, -318,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -318, -318,

     -318, -318, -318, -318, -318,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -318, -318, -318, -318,  174, -318,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  374,  174,  174,  174,  174,  174,
      174,  174,  174, -318, -318, -318, -318, -318
    },

    {
       29, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,

     -319, -319,  319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319

    },

    {
       29, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320,  376, -320, -320, -320, -320, -320, -320, -320,
     -320,  377, -320, -320, -320, -320, -320,  378,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,

     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320, -320, -320
    },

    {
       29, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,

     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321, -321, -321
    },

    {
       29, -322, -322, -322, -322, -322, -322, -322, -322, -322,
     -322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
     -322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
     -322, -322, -322, -322, -322, -322, -322, -322, -322, -322,

     -322, -322, -322, -322, -322, -322, -322, -322,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -322, -322,
     -322, -322, -322, -322, -322,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -322, -322, -322, -322,  174, -322,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -322, -322, -322, -322, -322
    },

    {
       29, -323, -323, -323, -323, -323, -323, -323, -323, -323,

     -323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
     -323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
     -323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
     -323, -323, -323, -323, -323, -323, -323, -323,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -323, -323,
     -323, -323, -323, -323, -323,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -323, -323, -323, -323,  174, -323,  174,  174,  174,
      174,  379,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -323, -323, -323, -323, -323
    },

    {
       29, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324, -324, -324,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -324, -324,
     -324, -324, -324, -324, -324,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -324, -324, -324, -324,  174, -324,  174,  174,  174,
      174,  174,  174,  380,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -324, -324, -324, -324, -324
    },

    {
       29, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325, -325, -325,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -325, -325,
     -325, -325, -325, -325, -325,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -325, -325, -325, -325,  174, -325,  174,  174,  174,
      174,  381,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -325, -325, -325, -325, -325
    },

    {
       29, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326, -326, -326, -326, -326,

     -326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326, -326, -326,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -326, -326,
     -326, -326, -326, -326, -326,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -326, -326, -326, -326,  174, -326,  174,  174,  174,
      174,  174,  174,  382,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -326, -326, -326, -326, -326
    },

    {
       29, -327, -327, -327, -327, -327, -327, -327, -327, -327,
     -327, -327, -327, -327, -327, -327, -327, -327, -327, -327,
     -327, -327, -327, -327, -327, -327, -327, -327, -327, -327,
     -327, -327, -327, -327, -327, -327, -327, -327, -327, -327,
     -327, -327, -327, -327, -327, -327, -327, -327,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -327, -327,
     -327, -327, -327, -327, -327,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -327, -327, -327, -327,  174, -327,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  383,  174,  174,  174,  174,
      174,  174,  174, -327, -327, -327, -327, -327
    },

    {
       29, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328,  328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384, -328, -328,

     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328, -328, -328
    },

    {
       29, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,

     -329, -329,  385, -329, -329, -329, -329, -329, -329, -329,
     -329,  386, -329, -329, -329, -329, -329,  387,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329, -329, -329

    },

    {
       29, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,

     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330, -330, -330
    },

    {
       29, -331, -331, -331, -331, -331, -331, -331, -331, -331,
     -331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
     -331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
     -331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
     -331, -331, -331, -331, -331, -331, -331, -331,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -331, -331,
     -331, -331, -331, -331, -331,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -331, -331, -331, -331,  174, -331,  174,  174,  174,
      174,  388,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -331, -331, -331, -331, -331
    },

    {
       29, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332, -332, -332, -332, -332,

     -332, -332, -332, -332, -332, -332, -332, -332,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -332, -332,
     -332, -332, -332, -332, -332,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -332, -332, -332, -332,  174, -332,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  389,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -332, -332, -332, -332, -332
    },

    {
       29, -333, -333, -333, -333, -333, -333, -333, -333, -333,

     -333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333, -333, -333,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390, -333, -333,
     -333, -333, -333, -333, -333,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  391,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -333, -333, -333, -333,  174, -333,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -333, -333, -333, -333, -333
    },

    {
       29, -334, -334, -334, -334, -334, -334, -334, -334, -334,
     -334, -334, -334, -334, -334, -334, -334, -334, -334, -334,
     -334, -334, -334, -334, -334, -334, -334, -334, -334, -334,
     -334, -334, -334, -334, -334, -334, -334, -334, -334, -334,
     -334, -334, -334, -334, -334, -334, -334, -334,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -334, -334,
     -334, -334, -334, -334, -334,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -334, -334, -334, -334,  174, -334,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      392,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -334, -334, -334, -334, -334
    },

    {
       29, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,

     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335, -335, -335
    },

    {
       29, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,

     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336,  393, -336, -336, -336, -336, -336,

     -336, -336, -336, -336, -336, -336, -336, -336
    },

    {
       29, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337, -337, -337, -337, -337,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -337, -337,
     -337, -337, -337, -337, -337,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -337, -337, -337, -337,  174, -337,  174,  174,  174,
      174,  394,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  395,  174,
      174,  174,  174, -337, -337, -337, -337, -337
    },

    {
       29, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338, -338, -338,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -338, -338,

     -338, -338, -338, -338, -338,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -338, -338, -338, -338,  174, -338,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  396,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -338, -338, -338, -338, -338
    },

    {
       29, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339, -339, -339, -339, -339,

     -339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339, -339, -339,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -339, -339,
     -339, -339, -339, -339, -339,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -339, -339, -339, -339,  174, -339,  174,  397,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -339, -339, -339, -339, -339

    },

    {
       29, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340, -340, -340,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -340, -340,
     -340, -340, -340, -340, -340,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -340, -340, -340, -340,  174, -340,  398,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -340, -340, -340, -340, -340
    },

    {
       29, -341, -341, -341, -341, -341, -341, -341, -341, -341,
     -341, -341, -341, -341, -341, -341, -341, -341, -341, -341,
     -341, -341, -341, -341, -341, -341, -341, -341, -341, -341,
     -341, -341, -341, -341, -341, -341, -341, -341, -341, -341,
     -341, -341, -341, -341, -341, -341, -341, -341,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -341, -341,
     -341, -341, -341, -341, -341,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -341, -341, -341, -341,  174, -341,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  399,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -341, -341, -341, -341, -341
    },

    {
       29, -342, -342, -342, -342, -342, -342, -342, -342, -342,
     -342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
     -342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
     -342, -342, -342, -342, -342, -342, -342, -342, -342, -342,

     -342, -342, -342, -342, -342, -342, -342, -342,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -342, -342,
     -342, -342, -342, -342, -342,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -342, -342, -342, -342,  174, -342,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  400,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -342, -342, -342, -342, -342
    },

    {
       29, -343, -343, -343, -343, -343, -343, -343, -343, -343,

     -343, -343, -343, -343, -343, -343, -343, -343, -343, -343,
     -343, -343, -343, -343, -343, -343, -343, -343, -343, -343,
     -343, -343, -343, -343, -343, -343, -343, -343, -343, -343,
     -343, -343, -343, -343, -343, -343, -343, -343,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -343, -343,
     -343, -343, -343, -343, -343,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -343, -343, -343, -343,  174, -343,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  401,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -343, -343, -343, -343, -343
    },

    {
       29, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,

     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344, -344, -344
    },

    {
       29, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,

     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345, -345, -345
    },

    {
       29, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,

     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346,  402,  403,  404, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346, -346, -346, -346, -346,

     -346, -346, -346, -346, -346, -346, -346, -346
    },

    {
       29, -347, -347, -347, -347, -347, -347, -347, -347, -347,
     -347, -347, -347, -347, -347, -347, -347, -347, -347, -347,
     -347, -347, -347, -347, -347, -347, -347, -347, -347, -347,
     -347, -347, -347, -347, -347, -347, -347, -347, -347, -347,
     -347, -347, -347,  347,  347,  347,  347,  347, -347, -347,
     -347, -347, -347, -347, -347, -347, -347, -347,  347, -347,
     -347, -347, -347, -347, -347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347, -347,  347, -347, -347,  347, -347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347, -347, -347, -347, -347, -347
    },

    {
       29, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349, -348, -348,

     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348, -348, -348
    },

    {
       29, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,

     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349, -349, -349

    },

    {
       29, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,

     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350, -350, -350
    },

    {
       29, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,

     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351,  405, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351,  405, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351, -351, -351
    },

    {
       29, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,

     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352,  406, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352,  406, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352, -352, -352
    },

    {
       29, -353, -353, -353, -353, -353, -353, -353, -353, -353,

     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353,  407, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353, -353,  407,
     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,

     -353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353, -353, -353
    },

    {
       29, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354,  408, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,

     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354,  408, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354, -354, -354
    },

    {
       29, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,

     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355,  409, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355, -355, -355,
      409, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355, -355, -355
    },

    {
       29, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,

     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356,  410, -356,  411, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356, -356, -356,  410, -356,
      411, -356, -356, -356, -356, -356, -356, -356, -356, -356,

     -356, -356, -356, -356, -356, -356, -356, -356
    },

    {
       29, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357,  412, -357, -357, -357, -357, -357, -357,  413,

     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357,  412, -357, -357, -357, -357, -357,
     -357,  413, -357, -357, -357, -357, -357, -357
    },

    {
       29, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,

     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358,  414, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358, -358, -358,  414, -358,
     -358, -358, -358, -358, -358, -358, -358, -358
    },

    {
       29, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,

     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359,  415, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359,  415, -359, -359, -359,
     -359, -359, -359, -359, -359, -359, -359, -359

    },

    {
       29, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
      416, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,

     -360, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360,  416, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360, -360, -360
    },

    {
       29, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,

     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361, -361, -361
    },

    {
       29, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,

     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362,  417, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362, -362, -362
    },

    {
       29, -363, -363, -363, -363, -363, -363, -363, -363, -363,

     -363, -363, -363, -363, -363, -363, -363, -363, -363, -363,
     -363, -363, -363, -363, -363, -363, -363, -363, -363, -363,
     -363, -363, -363, -363, -363, -363, -363, -363, -363, -363,
     -363, -363, -363, -363, -363, -363, -363, -363,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -363, -363,
     -363, -363, -363, -363, -363,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -363, -363, -363, -363,  174, -363,  418,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -363, -363, -363, -363, -363
    },

    {
       29, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364,  419, -364, -364, -364, -364, -364, -364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,

     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364, -364, -364
    },

    {
       29, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,

     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365,  420, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365, -365, -365
    },

    {
       29, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,

     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366,  421, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366, -366, -366, -366, -366,

     -366, -366, -366, -366, -366, -366, -366, -366
    },

    {
       29, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,

     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367, -367,  422, -367, -367, -367, -367,
     -367, -367, -367, -367, -367, -367, -367, -367
    },

    {
       29, -368, -368, -368, -368, -368, -368, -368, -368, -368,
     -368, -368, -368, -368, -368, -368, -368, -368, -368, -368,
     -368, -368, -368, -368, -368, -368, -368, -368, -368, -368,
     -368, -368, -368, -368, -368, -368, -368, -368, -368, -368,
     -368, -368, -368, -368, -368, -368, -368, -368,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -368, -368,

     -368, -368, -368, -368, -368,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -368, -368, -368, -368,  174, -368,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  423,  174,  174,  174,  174,  174,
      174,  174,  174, -368, -368, -368, -368, -368
    },

    {
       29, -369, -369, -369, -369, -369, -369, -369, -369, -369,
     -369, -369, -369, -369, -369, -369, -369, -369, -369, -369,
     -369, -369, -369, -369, -369, -369, -369, -369, -369, -369,

     -369, -369, -369, -369, -369, -369, -369, -369, -369, -369,
     -369, -369, -369, -369, -369, -369, -369, -369,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -369, -369,
     -369, -369, -369, -369, -369,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -369, -369, -369, -369,  174, -369,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -369, -369, -369, -369, -369

    },

    {
       29, -370, -370, -370, -370, -370, -370, -370, -370, -370,
     -370, -370, -370, -370, -370, -370, -370, -370, -370, -370,
     -370, -370, -370, -370, -370, -370, -370, -370, -370, -370,
     -370, -370, -370, -370, -370, -370, -370, -370, -370, -370,
     -370, -370, -370, -370, -370, -370, -370, -370,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -370, -370,
     -370, -370, -370, -370, -370,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -370, -370, -370, -370,  174, -370,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  424,  174,  174,
      174,  174,  174, -370, -370, -370, -370, -370
    },

    {
       29, -371, -371, -371, -371, -371, -371, -371, -371, -371,
     -371, -371, -371, -371, -371, -371, -371, -371, -371, -371,
     -371, -371, -371, -371, -371, -371, -371, -371, -371, -371,
     -371, -371, -371, -371, -371, -371, -371, -371, -371, -371,
     -371, -371, -371, -371, -371, -371, -371, -371,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -371, -371,
     -371, -371, -371, -371, -371,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -371, -371, -371, -371,  174, -371,  425,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -371, -371, -371, -371, -371
    },

    {
       29, -372, -372, -372, -372, -372, -372, -372, -372, -372,
     -372, -372, -372, -372, -372, -372, -372, -372, -372, -372,
     -372, -372, -372, -372, -372, -372, -372, -372, -372, -372,
     -372, -372, -372, -372, -372, -372, -372, -372, -372, -372,

     -372, -372, -372, -372, -372, -372, -372, -372,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -372, -372,
     -372, -372, -372, -372, -372,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -372, -372, -372, -372,  174, -372,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  426,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -372, -372, -372, -372, -372
    },

    {
       29, -373, -373, -373, -373, -373, -373, -373, -373, -373,

     -373, -373, -373, -373, -373, -373, -373, -373, -373, -373,
     -373, -373, -373, -373, -373, -373, -373, -373, -373, -373,
     -373, -373, -373, -373, -373, -373, -373, -373, -373, -373,
     -373, -373, -373, -373, -373, -373, -373, -373,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -373, -373,
     -373, -373, -373, -373, -373,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -373, -373, -373, -373,  174, -373,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  427,  174,  174,  174,
      174,  174,  174, -373, -373, -373, -373, -373
    },

    {
       29, -374, -374, -374, -374, -374, -374, -374, -374, -374,
     -374, -374, -374, -374, -374, -374, -374, -374, -374, -374,
     -374, -374, -374, -374, -374, -374, -374, -374, -374, -374,
     -374, -374, -374, -374, -374, -374, -374, -374, -374, -374,
     -374, -374, -374, -374, -374, -374, -374, -374,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -374, -374,
     -374, -374, -374, -374, -374,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -374, -374, -374, -374,  174, -374,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  428,  174,  174,  174,
      174,  174,  174, -374, -374, -374, -374, -374
    },

    {
       29, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375,  429, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375,  378,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375, -375, -375
    },

    {
       29, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,

     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376,  376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376,  378,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,
     -376, -376, -376, -376, -376, -376, -376, -376, -376, -376,

     -376, -376, -376, -376, -376, -376, -376, -376
    },

    {
       29, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377,  431, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,

     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377, -377, -377,
     -377, -377, -377, -377, -377, -377, -377, -377
    },

    {
       29, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432, -378, -378,

     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378, -378, -378,
     -378, -378, -378, -378, -378, -378, -378, -378
    },

    {
       29, -379, -379, -379, -379, -379, -379, -379, -379, -379,
     -379, -379, -379, -379, -379, -379, -379, -379, -379, -379,
     -379, -379, -379, -379, -379, -379, -379, -379, -379, -379,

     -379, -379, -379, -379, -379, -379, -379, -379, -379, -379,
     -379, -379, -379, -379, -379, -379, -379, -379,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -379, -379,
     -379, -379, -379, -379, -379,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -379, -379, -379, -379,  174, -379,  174,  174,  174,
      174,  174,  174,  433,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -379, -379, -379, -379, -379

    },

    {
       29, -380, -380, -380, -380, -380, -380, -380, -380, -380,
     -380, -380, -380, -380, -380, -380, -380, -380, -380, -380,
     -380, -380, -380, -380, -380, -380, -380, -380, -380, -380,
     -380, -380, -380, -380, -380, -380, -380, -380, -380, -380,
     -380, -380, -380, -380, -380, -380, -380, -380,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -380, -380,
     -380, -380, -380, -380, -380,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -380, -380, -380, -380,  174, -380,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -380, -380, -380, -380, -380
    },

    {
       29, -381, -381, -381, -381, -381, -381, -381, -381, -381,
     -381, -381, -381, -381, -381, -381, -381, -381, -381, -381,
     -381, -381, -381, -381, -381, -381, -381, -381, -381, -381,
     -381, -381, -381, -381, -381, -381, -381, -381, -381, -381,
     -381, -381, -381, -381, -381, -381, -381, -381,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -381, -381,
     -381, -381, -381, -381, -381,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -381, -381, -381, -381,  174, -381,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  434,  174,  174,  174,  174,
      174,  174,  174, -381, -381, -381, -381, -381
    },

    {
       29, -382, -382, -382, -382, -382, -382, -382, -382, -382,
     -382, -382, -382, -382, -382, -382, -382, -382, -382, -382,
     -382, -382, -382, -382, -382, -382, -382, -382, -382, -382,
     -382, -382, -382, -382, -382, -382, -382, -382, -382, -382,

     -382, -382, -382, -382, -382, -382, -382, -382,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -382, -382,
     -382, -382, -382, -382, -382,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -382, -382, -382, -382,  174, -382,  174,  174,  174,
      174,  435,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -382, -382, -382, -382, -382
    },

    {
       29, -383, -383, -383, -383, -383, -383, -383, -383, -383,

     -383, -383, -383, -383, -383, -383, -383, -383, -383, -383,
     -383, -383, -383, -383, -383, -383, -383, -383, -383, -383,
     -383, -383, -383, -383, -383, -383, -383, -383, -383, -383,
     -383, -383, -383, -383, -383, -383, -383, -383,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -383, -383,
     -383, -383, -383, -383, -383,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -383, -383, -383, -383,  174, -383,  174,  174,  174,
      174,  174,  174,  174,  174,  436,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -383, -383, -383, -383, -383
    },

    {
       29, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384,  437, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384,  387,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,

     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384, -384, -384,
     -384, -384, -384, -384, -384, -384, -384, -384
    },

    {
       29, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385,  385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385,  387,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
     -385, -385, -385, -385, -385, -385, -385, -385
    },

    {
       29, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,

     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386,  439, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
     -386, -386, -386, -386, -386, -386, -386, -386, -386, -386,

     -386, -386, -386, -386, -386, -386, -386, -386
    },

    {
       29, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,

     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387, -387, -387,
     -387, -387, -387, -387, -387, -387, -387, -387
    },

    {
       29, -388, -388, -388, -388, -388, -388, -388, -388, -388,
     -388, -388, -388, -388, -388, -388, -388, -388, -388, -388,
     -388, -388, -388, -388, -388, -388, -388, -388, -388, -388,
     -388, -388, -388, -388, -388, -388, -388, -388, -388, -388,
     -388, -388, -388, -388, -388, -388, -388, -388,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -388, -388,

     -388, -388, -388, -388, -388,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -388, -388, -388, -388,  174, -388,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  441,  174,  174,  174,
      174,  174,  174, -388, -388, -388, -388, -388
    },

    {
       29, -389, -389, -389, -389, -389, -389, -389, -389, -389,
     -389, -389, -389, -389, -389, -389, -389, -389, -389, -389,
     -389, -389, -389, -389, -389, -389, -389, -389, -389, -389,

     -389, -389, -389, -389, -389, -389, -389, -389, -389, -389,
     -389, -389, -389, -389, -389, -389, -389, -389,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -389, -389,
     -389, -389, -389, -389, -389,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -389, -389, -389, -389,  174, -389,  174,  174,  174,
      442,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -389, -389, -389, -389, -389

    },

    {
       29, -390, -390, -390, -390, -390, -390, -390, -390, -390,
     -390, -390, -390, -390, -390, -390, -390, -390, -390, -390,
     -390, -390, -390, -390, -390, -390, -390, -390, -390, -390,
     -390, -390, -390, -390, -390, -390, -390, -390, -390, -390,
     -390, -390, -390, -390, -390, -390, -390, -390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390, -390, -390,
     -390, -390, -390, -390, -390,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -390, -390, -390, -390,  174, -390,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -390, -390, -390, -390, -390
    },

    {
       29, -391, -391, -391, -391, -391, -391, -391, -391, -391,
     -391, -391, -391, -391, -391, -391, -391, -391, -391, -391,
     -391, -391, -391, -391, -391, -391, -391, -391, -391, -391,
     -391, -391, -391, -391, -391, -391, -391, -391, -391, -391,
     -391, -391, -391, -391, -391, -391, -391, -391,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -391, -391,
     -391, -391, -391, -391, -391,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -391, -391, -391, -391,  174, -391,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -391, -391, -391, -391, -391
    },

    {
       29, -392, -392, -392, -392, -392, -392, -392, -392, -392,
     -392, -392, -392, -392, -392, -392, -392, -392, -392, -392,
     -392, -392, -392, -392, -392, -392, -392, -392, -392, -392,
     -392, -392, -392, -392, -392, -392, -392, -392, -392, -392,

     -392, -392, -392, -392, -392, -392, -392, -392,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -392, -392,
     -392, -392, -392, -392, -392,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -392, -392, -392, -392,  174, -392,  174,  174,  174,
      174,  174,  174,  443,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -392, -392, -392, -392, -392
    },

    {
       29, -393, -393, -393, -393, -393, -393, -393, -393, -393,

     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393, -393, -393, -393, -393, -393, -393, -393, -393, -393,
     -393,  444, -393, -393, -393, -393, -393, -393, -393, -393,

     -393, -393, -393, -393, -393, -393, -393, -393,  445, -393,
     -393, -393, -393, -393, -393, -393, -393, -393
    },

    {
       29, -394, -394, -394, -394, -394, -394, -394, -394, -394,
     -394, -394, -394, -394, -394, -394, -394, -394, -394, -394,
     -394, -394, -394, -394, -394, -394, -394, -394, -394, -394,
     -394, -394, -394, -394, -394, -394, -394, -394, -394, -394,
     -394, -394, -394, -394, -394, -394, -394, -394,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -394, -394,
     -394, -394, -394, -394, -394,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -394, -394, -394, -394,  174, -394,  446,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -394, -394, -394, -394, -394
    },

    {
       29, -395, -395, -395, -395, -395, -395, -395, -395, -395,
     -395, -395, -395, -395, -395, -395, -395, -395, -395, -395,
     -395, -395, -395, -395, -395, -395, -395, -395, -395, -395,
     -395, -395, -395, -395, -395, -395, -395, -395, -395, -395,
     -395, -395, -395, -395, -395, -395, -395, -395,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -395, -395,
     -395, -395, -395, -395, -395,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -395, -395, -395, -395,  174, -395,  447,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -395, -395, -395, -395, -395
    },

    {
       29, -396, -396, -396, -396, -396, -396, -396, -396, -396,
     -396, -396, -396, -396, -396, -396, -396, -396, -396, -396,

     -396, -396, -396, -396, -396, -396, -396, -396, -396, -396,
     -396, -396, -396, -396, -396, -396, -396, -396, -396, -396,
     -396, -396, -396, -396, -396, -396, -396, -396,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -396, -396,
     -396, -396, -396, -396, -396,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -396, -396, -396, -396,  174, -396,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  448,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -396, -396, -396, -396, -396
    },

    {
       29, -397, -397, -397, -397, -397, -397, -397, -397, -397,
     -397, -397, -397, -397, -397, -397, -397, -397, -397, -397,
     -397, -397, -397, -397, -397, -397, -397, -397, -397, -397,
     -397, -397, -397, -397, -397, -397, -397, -397, -397, -397,
     -397, -397, -397, -397, -397, -397, -397, -397,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -397, -397,
     -397, -397, -397, -397, -397,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -397, -397, -397, -397,  174, -397,  449,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -397, -397, -397, -397, -397
    },

    {
       29, -398, -398, -398, -398, -398, -398, -398, -398, -398,
     -398, -398, -398, -398, -398, -398, -398, -398, -398, -398,
     -398, -398, -398, -398, -398, -398, -398, -398, -398, -398,
     -398, -398, -398, -398, -398, -398, -398, -398, -398, -398,
     -398, -398, -398, -398, -398, -398, -398, -398,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -398, -398,

     -398, -398, -398, -398, -398,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -398, -398, -398, -398,  174, -398,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  450,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -398, -398, -398, -398, -398
    },

    {
       29, -399, -399, -399, -399, -399, -399, -399, -399, -399,
     -399, -399, -399, -399, -399, -399, -399, -399, -399, -399,
     -399, -399, -399, -399, -399, -399, -399, -399, -399, -399,

     -399, -399, -399, -399, -399, -399, -399, -399, -399, -399,
     -399, -399, -399, -399, -399, -399, -399, -399,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -399, -399,
     -399, -399, -399, -399, -399,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -399, -399, -399, -399,  174, -399,  174,  174,  174,
      174,  174,  174,  174,  174,  451,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -399, -399, -399, -399, -399

    },

    {
       29, -400, -400, -400, -400, -400, -400, -400, -400, -400,
     -400, -400, -400, -400, -400, -400, -400, -400, -400, -400,
     -400, -400, -400, -400, -400, -400, -400, -400, -400, -400,
     -400, -400, -400, -400, -400, -400, -400, -400, -400, -400,
     -400, -400, -400, -400, -400, -400, -400, -400,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -400, -400,
     -400, -400, -400, -400, -400,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -400, -400, -400, -400,  174, -400,  174,  174,  174,

      174,  174,  174,  174,  174,  452,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -400, -400, -400, -400, -400
    },

    {
       29, -401, -401, -401, -401, -401, -401, -401, -401, -401,
     -401, -401, -401, -401, -401, -401, -401, -401, -401, -401,
     -401, -401, -401, -401, -401, -401, -401, -401, -401, -401,
     -401, -401, -401, -401, -401, -401, -401, -401, -401, -401,
     -401, -401, -401, -401, -401, -401, -401, -401,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -401, -401,
     -401, -401, -401, -401, -401,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -401, -401, -401, -401,  174, -401,  174,  174,  174,
      174,  174,  174,  174,  174,  453,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -401, -401, -401, -401, -401
    },

    {
       29, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,

     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402, -402, -402,
     -402, -402, -402, -402, -402, -402, -402, -402
    },

    {
       29, -403, -403, -403, -403, -403, -403, -403, -403, -403,

     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403, -403,  402,
     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,

     -403, -403, -403, -403, -403, -403, -403, -403, -403, -403,
     -403, -403, -403, -403, -403, -403, -403, -403
    },

    {
       29, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,

     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404,  402,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404, -404, -404,
     -404, -404, -404, -404, -404, -404, -404, -404
    },

    {
       29, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
     -405, -405, -405, -405, -405, -405, -405, -405
    },

    {
       29, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,

     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,
     -406, -406, -406, -406, -406, -406, -406, -406, -406, -406,

     -406, -406, -406, -406, -406, -406, -406, -406
    },

    {
       29, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,

     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
     -407, -407, -407, -407, -407, -407, -407, -407
    },

    {
       29, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -408, -408,

     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408, -408, -408,
     -408, -408, -408, -408, -408, -408, -408, -408
    },

    {
       29, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,

     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
     -409, -409, -409, -409, -409, -409, -409, -409

    },

    {
       29, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,

     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410, -410, -410,
     -410, -410, -410, -410, -410, -410, -410, -410
    },

    {
       29, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,

     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411, -411, -411,
     -411, -411, -411, -411, -411, -411, -411, -411
    },

    {
       29, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,

     -412, -412, -412, -412, -412, -412, -412, -412,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412, -412, -412,
     -412, -412, -412, -412, -412, -412, -412, -412
    },

    {
       29, -413, -413, -413, -413, -413, -413, -413, -413, -413,

     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,

     -413, -413, -413, -413, -413, -413, -413, -413, -413, -413,
     -413, -413, -413, -413, -413, -413, -413, -413
    },

    {
       29, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,

     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414, -414, -414,
     -414, -414, -414, -414, -414, -414, -414, -414
    },

    {
       29, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
     -415, -415, -415, -415, -415, -415, -415, -415
    },

    {
       29, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,

     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,
     -416, -416, -416, -416, -416, -416, -416, -416, -416, -416,

     -416, -416, -416, -416, -416, -416, -416, -416
    },

    {
       29, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,

     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417,  455, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417, -417, -417,
     -417, -417, -417, -417, -417, -417, -417, -417
    },

    {
       29, -418, -418, -418, -418, -418, -418, -418, -418, -418,
     -418, -418, -418, -418, -418, -418, -418, -418, -418, -418,
     -418, -418, -418, -418, -418, -418, -418, -418, -418, -418,
     -418, -418, -418, -418, -418, -418, -418, -418, -418, -418,
     -418, -418, -418, -418, -418, -418, -418, -418,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -418, -418,

     -418, -418, -418, -418, -418,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -418, -418, -418, -418,  174, -418,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -418, -418, -418, -418, -418
    },

    {
       29, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,

     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419,  456, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419, -419, -419,
     -419, -419, -419, -419, -419, -419, -419, -419

    },

    {
       29, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,

     -420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
     -420, -420, -420, -420, -420,  457, -420, -420, -420, -420,
     -420, -420, -420, -420, -420, -420, -420, -420
    },

    {
       29, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,

     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421, -421, -421,
     -421, -421, -421,  458, -421, -421, -421, -421, -421, -421,
     -421, -421, -421, -421, -421, -421, -421, -421
    },

    {
       29, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,

     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422, -422, -422,
     -422, -422, -422, -422, -422, -422,  459, -422, -422, -422,
     -422, -422, -422, -422, -422, -422, -422, -422
    },

    {
       29, -423, -423, -423, -423, -423, -423, -423, -423, -423,

     -423, -423, -423, -423, -423, -423, -423, -423, -423, -423,
     -423, -423, -423, -423, -423, -423, -423, -423, -423, -423,
     -423, -423, -423, -423, -423, -423, -423, -423, -423, -423,
     -423, -423, -423, -423, -423, -423, -423, -423,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -423, -423,
     -423, -423, -423, -423, -423,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -423, -423, -423, -423,  174, -423,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  460,  174,  174,  174,
      174,  174,  174, -423, -423, -423, -423, -423
    },

    {
       29, -424, -424, -424, -424, -424, -424, -424, -424, -424,
     -424, -424, -424, -424, -424, -424, -424, -424, -424, -424,
     -424, -424, -424, -424, -424, -424, -424, -424, -424, -424,
     -424, -424, -424, -424, -424, -424, -424, -424, -424, -424,
     -424, -424, -424, -424, -424, -424, -424, -424,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -424, -424,
     -424, -424, -424, -424, -424,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -424, -424, -424, -424,  174, -424,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  461,  174,  174,  174,  174,  174,
      174,  174,  174, -424, -424, -424, -424, -424
    },

    {
       29, -425, -425, -425, -425, -425, -425, -425, -425, -425,
     -425, -425, -425, -425, -425, -425, -425, -425, -425, -425,
     -425, -425, -425, -425, -425, -425, -425, -425, -425, -425,
     -425, -425, -425, -425, -425, -425, -425, -425, -425, -425,
     -425, -425, -425, -425, -425, -425, -425, -425,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -425, -425,
     -425, -425, -425, -425, -425,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -425, -425, -425, -425,  174, -425,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  462,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -425, -425, -425, -425, -425
    },

    {
       29, -426, -426, -426, -426, -426, -426, -426, -426, -426,
     -426, -426, -426, -426, -426, -426, -426, -426, -426, -426,

     -426, -426, -426, -426, -426, -426, -426, -426, -426, -426,
     -426, -426, -426, -426, -426, -426, -426, -426, -426, -426,
     -426, -426, -426, -426, -426, -426, -426, -426,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -426, -426,
     -426, -426, -426, -426, -426,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -426, -426, -426, -426,  174, -426,  174,  174,  174,
      174,  463,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -426, -426, -426, -426, -426
    },

    {
       29, -427, -427, -427, -427, -427, -427, -427, -427, -427,
     -427, -427, -427, -427, -427, -427, -427, -427, -427, -427,
     -427, -427, -427, -427, -427, -427, -427, -427, -427, -427,
     -427, -427, -427, -427, -427, -427, -427, -427, -427, -427,
     -427, -427, -427, -427, -427, -427, -427, -427,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -427, -427,
     -427, -427, -427, -427, -427,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -427, -427, -427, -427,  174, -427,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -427, -427, -427, -427, -427
    },

    {
       29, -428, -428, -428, -428, -428, -428, -428, -428, -428,
     -428, -428, -428, -428, -428, -428, -428, -428, -428, -428,
     -428, -428, -428, -428, -428, -428, -428, -428, -428, -428,
     -428, -428, -428, -428, -428, -428, -428, -428, -428, -428,
     -428, -428, -428, -428, -428, -428, -428, -428,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -428, -428,

     -428, -428, -428, -428, -428,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -428, -428, -428, -428,  174, -428,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -428, -428, -428, -428, -428
    },

    {
       29, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,

     -429, -429,  429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429,  378, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429, -429, -429,
     -429, -429, -429, -429, -429, -429, -429, -429

    },

    {
       29, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430,  464, -430, -430, -430, -430, -430, -430, -430,
     -430,  377, -430, -430, -430, -430, -430, -430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,

     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430, -430, -430,
     -430, -430, -430, -430, -430, -430, -430, -430
    },

    {
       29, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,

     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431, -431, -431,
     -431, -431, -431, -431, -431, -431, -431, -431
    },

    {
       29, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432,  465, -432, -432, -432, -432, -432, -432, -432,

     -432,  466, -432, -432, -432, -432, -432, -432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
     -432, -432, -432, -432, -432, -432, -432, -432
    },

    {
       29, -433, -433, -433, -433, -433, -433, -433, -433, -433,

     -433, -433, -433, -433, -433, -433, -433, -433, -433, -433,
     -433, -433, -433, -433, -433, -433, -433, -433, -433, -433,
     -433, -433, -433, -433, -433, -433, -433, -433, -433, -433,
     -433, -433, -433, -433, -433, -433, -433, -433,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -433, -433,
     -433, -433, -433, -433, -433,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -433, -433, -433, -433,  174, -433,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  467,  174,  174,  174,  174,  174,
      174,  174,  174, -433, -433, -433, -433, -433
    },

    {
       29, -434, -434, -434, -434, -434, -434, -434, -434, -434,
     -434, -434, -434, -434, -434, -434, -434, -434, -434, -434,
     -434, -434, -434, -434, -434, -434, -434, -434, -434, -434,
     -434, -434, -434, -434, -434, -434, -434, -434, -434, -434,
     -434, -434, -434, -434, -434, -434, -434, -434,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -434, -434,
     -434, -434, -434, -434, -434,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -434, -434, -434, -434,  174, -434,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  468,  174,  174,  174,
      174,  174,  174, -434, -434, -434, -434, -434
    },

    {
       29, -435, -435, -435, -435, -435, -435, -435, -435, -435,
     -435, -435, -435, -435, -435, -435, -435, -435, -435, -435,
     -435, -435, -435, -435, -435, -435, -435, -435, -435, -435,
     -435, -435, -435, -435, -435, -435, -435, -435, -435, -435,
     -435, -435, -435, -435, -435, -435, -435, -435,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -435, -435,
     -435, -435, -435, -435, -435,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -435, -435, -435, -435,  174, -435,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -435, -435, -435, -435, -435
    },

    {
       29, -436, -436, -436, -436, -436, -436, -436, -436, -436,
     -436, -436, -436, -436, -436, -436, -436, -436, -436, -436,

     -436, -436, -436, -436, -436, -436, -436, -436, -436, -436,
     -436, -436, -436, -436, -436, -436, -436, -436, -436, -436,
     -436, -436, -436, -436, -436, -436, -436, -436,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -436, -436,
     -436, -436, -436, -436, -436,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -436, -436, -436, -436,  174, -436,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  469,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -436, -436, -436, -436, -436
    },

    {
       29, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437,  437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437,  387, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,

     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437, -437, -437,
     -437, -437, -437, -437, -437, -437, -437, -437
    },

    {
       29, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438,  470, -438, -438, -438, -438, -438, -438, -438,
     -438,  386, -438, -438, -438, -438, -438, -438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438, -438, -438,

     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
     -438, -438, -438, -438, -438, -438, -438, -438
    },

    {
       29, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,

     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439, -439, -439,
     -439, -439, -439, -439, -439, -439, -439, -439

    },

    {
       29, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440,  471, -440, -440, -440, -440, -440, -440, -440,
     -440,  472, -440, -440, -440, -440, -440, -440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,

     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
     -440, -440, -440, -440, -440, -440, -440, -440
    },

    {
       29, -441, -441, -441, -441, -441, -441, -441, -441, -441,
     -441, -441, -441, -441, -441, -441, -441, -441, -441, -441,
     -441, -441, -441, -441, -441, -441, -441, -441, -441, -441,
     -441, -441, -441, -441, -441, -441, -441, -441, -441, -441,
     -441, -441, -441, -441, -441, -441, -441, -441,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -441, -441,
     -441, -441, -441, -441, -441,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -441, -441, -441, -441,  174, -441,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  473,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -441, -441, -441, -441, -441
    },

    {
       29, -442, -442, -442, -442, -442, -442, -442, -442, -442,
     -442, -442, -442, -442, -442, -442, -442, -442, -442, -442,
     -442, -442, -442, -442, -442, -442, -442, -442, -442, -442,
     -442, -442, -442, -442, -442, -442, -442, -442, -442, -442,

     -442, -442, -442, -442, -442, -442, -442, -442,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -442, -442,
     -442, -442, -442, -442, -442,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -442, -442, -442, -442,  174, -442,  174,  174,  174,
      174,  474,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -442, -442, -442, -442, -442
    },

    {
       29, -443, -443, -443, -443, -443, -443, -443, -443, -443,

     -443, -443, -443, -443, -443, -443, -443, -443, -443, -443,
     -443, -443, -443, -443, -443, -443, -443, -443, -443, -443,
     -443, -443, -443, -443, -443, -443, -443, -443, -443, -443,
     -443, -443, -443, -443, -443, -443, -443, -443,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -443, -443,
     -443, -443, -443, -443, -443,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -443, -443, -443, -443,  174, -443,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -443, -443, -443, -443, -443
    },

    {
       29, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,

     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444,  475, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
     -444, -444, -444, -444, -444, -444, -444, -444
    },

    {
       29, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,

     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445,  476, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445, -445, -445,
     -445, -445, -445, -445, -445, -445, -445, -445
    },

    {
       29, -446, -446, -446, -446, -446, -446, -446, -446, -446,
     -446, -446, -446, -446, -446, -446, -446, -446, -446, -446,

     -446, -446, -446, -446, -446, -446, -446, -446, -446, -446,
     -446, -446, -446, -446, -446, -446, -446, -446, -446, -446,
     -446, -446, -446, -446, -446, -446, -446, -446,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -446, -446,
     -446, -446, -446, -446, -446,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -446, -446, -446, -446,  174, -446,  174,  174,  477,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174, -446, -446, -446, -446, -446
    },

    {
       29, -447, -447, -447, -447, -447, -447, -447, -447, -447,
     -447, -447, -447, -447, -447, -447, -447, -447, -447, -447,
     -447, -447, -447, -447, -447, -447, -447, -447, -447, -447,
     -447, -447, -447, -447, -447, -447, -447, -447, -447, -447,
     -447, -447, -447, -447, -447, -447, -447, -447,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -447, -447,
     -447, -447, -447, -447, -447,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -447, -447, -447, -447,  174, -447,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  478,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -447, -447, -447, -447, -447
    },

    {
       29,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      480,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  479,  479,

      479,  479,  479,  479,  479,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  479,  479,  479,  479,  481,  479,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  479,  479,  479,  479,  479
    },

    {
       29, -449, -449, -449, -449, -449, -449, -449, -449, -449,
     -449, -449, -449, -449, -449, -449, -449, -449, -449, -449,
     -449, -449, -449, -449, -449, -449, -449, -449, -449, -449,

     -449, -449, -449, -449, -449, -449, -449, -449, -449, -449,
     -449, -449, -449, -449, -449, -449, -449, -449,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -449, -449,
     -449, -449, -449, -449, -449,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -449, -449, -449, -449,  174, -449,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  482,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -449, -449, -449, -449, -449

    },

    {
       29, -450, -450, -450, -450, -450, -450, -450, -450, -450,
     -450, -450, -450, -450, -450, -450, -450, -450, -450, -450,
     -450, -450, -450, -450, -450, -450, -450, -450, -450, -450,
     -450, -450, -450, -450, -450, -450, -450, -450, -450, -450,
     -450, -450, -450, -450, -450, -450, -450, -450,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -450, -450,
     -450, -450, -450, -450, -450,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -450, -450, -450, -450,  174, -450,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -450, -450, -450, -450, -450
    },

    {
       29, -451, -451, -451, -451, -451, -451, -451, -451, -451,
     -451, -451, -451, -451, -451, -451, -451, -451, -451, -451,
     -451, -451, -451, -451, -451, -451, -451, -451, -451, -451,
     -451, -451, -451, -451, -451, -451, -451, -451, -451, -451,
     -451, -451, -451, -451, -451, -451, -451, -451,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -451, -451,
     -451, -451, -451, -451, -451,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -451, -451, -451, -451,  174, -451,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  483,  174,  174,  174,  174,
      174,  174,  174, -451, -451, -451, -451, -451
    },

    {
       29, -452, -452, -452, -452, -452, -452, -452, -452, -452,
     -452, -452, -452, -452, -452, -452, -452, -452, -452, -452,
     -452, -452, -452, -452, -452, -452, -452, -452, -452, -452,
     -452, -452, -452, -452, -452, -452, -452, -452, -452, -452,

     -452, -452, -452, -452, -452, -452, -452, -452,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -452, -452,
     -452, -452, -452, -452, -452,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -452, -452, -452, -452,  174, -452,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  484,  174,  174,  174,  174,
      174,  174,  174, -452, -452, -452, -452, -452
    },

    {
       29, -453, -453, -453, -453, -453, -453, -453, -453, -453,

     -453, -453, -453, -453, -453, -453, -453, -453, -453, -453,
     -453, -453, -453, -453, -453, -453, -453, -453, -453, -453,
     -453, -453, -453, -453, -453, -453, -453, -453, -453, -453,
     -453, -453, -453, -453, -453, -453, -453, -453,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -453, -453,
     -453, -453, -453, -453, -453,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -453, -453, -453, -453,  174, -453,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  485,  174,  174,  174,  174,
      174,  174,  174, -453, -453, -453, -453, -453
    },

    {
       29, -454, -454, -454, -454, -454, -454, -454, -454,  486,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454,  486, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,

     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
     -454, -454, -454, -454, -454, -454, -454, -454
    },

    {
       29, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,

     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455,  487, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
     -455, -455, -455, -455, -455, -455, -455, -455
    },

    {
       29, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,

     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,
     -456, -456, -456, -456, -456, -456, -456, -456, -456, -456,

     -456, -456, -456, -456, -456, -456, -456, -456
    },

    {
       29, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,

     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
     -457, -457, -457, -457, -457, -457,  488, -457, -457, -457,
     -457, -457, -457, -457, -457, -457, -457, -457
    },

    {
       29, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458,  489, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,

     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
     -458, -458, -458, -458, -458, -458, -458, -458
    },

    {
       29, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,

     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459,  490, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459, -459, -459,
     -459, -459, -459, -459, -459, -459, -459, -459

    },

    {
       29, -460, -460, -460, -460, -460, -460, -460, -460, -460,
     -460, -460, -460, -460, -460, -460, -460, -460, -460, -460,
     -460, -460, -460, -460, -460, -460, -460, -460, -460, -460,
     -460, -460, -460, -460, -460, -460, -460, -460, -460, -460,
     -460, -460, -460, -460, -460, -460, -460, -460,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -460, -460,
     -460, -460, -460, -460, -460,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -460, -460, -460, -460,  174, -460,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -460, -460, -460, -460, -460
    },

    {
       29, -461, -461, -461, -461, -461, -461, -461, -461, -461,
     -461, -461, -461, -461, -461, -461, -461, -461, -461, -461,
     -461, -461, -461, -461, -461, -461, -461, -461, -461, -461,
     -461, -461, -461, -461, -461, -461, -461, -461, -461, -461,
     -461, -461, -461, -461, -461, -461, -461, -461,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -461, -461,
     -461, -461, -461, -461, -461,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -461, -461, -461, -461,  174, -461,  174,  174,  174,
      174,  491,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -461, -461, -461, -461, -461
    },

    {
       29, -462, -462, -462, -462, -462, -462, -462, -462, -462,
     -462, -462, -462, -462, -462, -462, -462, -462, -462, -462,
     -462, -462, -462, -462, -462, -462, -462, -462, -462, -462,
     -462, -462, -462, -462, -462, -462, -462, -462, -462, -462,

     -462, -462, -462, -462, -462, -462, -462, -462,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -462, -462,
     -462, -462, -462, -462, -462,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -462, -462, -462, -462,  174, -462,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  492,  174,  174,  174,  174,
      174,  174,  174, -462, -462, -462, -462, -462
    },

    {
       29, -463, -463, -463, -463, -463, -463, -463, -463, -463,

     -463, -463, -463, -463, -463, -463, -463, -463, -463, -463,
     -463, -463, -463, -463, -463, -463, -463, -463, -463, -463,
     -463, -463, -463, -463, -463, -463, -463, -463, -463, -463,
     -463, -463, -463, -463, -463, -463, -463, -463,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -463, -463,
     -463, -463, -463, -463, -463,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -463, -463, -463, -463,  174, -463,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -463, -463, -463, -463, -463
    },

    {
       29, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464,  464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,

     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464, -464, -464,
     -464, -464, -464, -464, -464, -464, -464, -464
    },

    {
       29, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465,  465, -465, -465, -465, -465, -465, -465, -465,
     -465,  466, -465, -465, -465, -465, -465, -465, -465, -465,

     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465, -465, -465,
     -465, -465, -465, -465, -465, -465, -465, -465
    },

    {
       29, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,

     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466,  493, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,
     -466, -466, -466, -466, -466, -466, -466, -466, -466, -466,

     -466, -466, -466, -466, -466, -466, -466, -466
    },

    {
       29, -467, -467, -467, -467, -467, -467, -467, -467, -467,
     -467, -467, -467, -467, -467, -467, -467, -467, -467, -467,
     -467, -467, -467, -467, -467, -467, -467, -467, -467, -467,
     -467, -467, -467, -467, -467, -467, -467, -467, -467, -467,
     -467, -467, -467, -467, -467, -467, -467, -467,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -467, -467,
     -467, -467, -467, -467, -467,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -467, -467, -467, -467,  174, -467,  174,  174,  174,
      174,  494,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -467, -467, -467, -467, -467
    },

    {
       29, -468, -468, -468, -468, -468, -468, -468, -468, -468,
     -468, -468, -468, -468, -468, -468, -468, -468, -468, -468,
     -468, -468, -468, -468, -468, -468, -468, -468, -468, -468,
     -468, -468, -468, -468, -468, -468, -468, -468, -468, -468,
     -468, -468, -468, -468, -468, -468, -468, -468,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -468, -468,

     -468, -468, -468, -468, -468,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -468, -468, -468, -468,  174, -468,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -468, -468, -468, -468, -468
    },

    {
       29, -469, -469, -469, -469, -469, -469, -469, -469, -469,
     -469, -469, -469, -469, -469, -469, -469, -469, -469, -469,
     -469, -469, -469, -469, -469, -469, -469, -469, -469, -469,

     -469, -469, -469, -469, -469, -469, -469, -469, -469, -469,
     -469, -469, -469, -469, -469, -469, -469, -469,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -469, -469,
     -469, -469, -469, -469, -469,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -469, -469, -469, -469,  174, -469,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  495,  174, -469, -469, -469, -469, -469

    },

    {
       29, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470,  470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,

     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470, -470, -470,
     -470, -470, -470, -470, -470, -470, -470, -470
    },

    {
       29, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471,  471, -471, -471, -471, -471, -471, -471, -471,
     -471,  472, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,

     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471, -471, -471,
     -471, -471, -471, -471, -471, -471, -471, -471
    },

    {
       29, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,

     -472, -472, -472, -472, -472, -472,  496, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472, -472, -472,
     -472, -472, -472, -472, -472, -472, -472, -472
    },

    {
       29, -473, -473, -473, -473, -473, -473, -473, -473, -473,

     -473, -473, -473, -473, -473, -473, -473, -473, -473, -473,
     -473, -473, -473, -473, -473, -473, -473, -473, -473, -473,
     -473, -473, -473, -473, -473, -473, -473, -473, -473, -473,
     -473, -473, -473, -473, -473, -473, -473, -473,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -473, -473,
     -473, -473, -473, -473, -473,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -473, -473, -473, -473,  174, -473,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  497,  174, -473, -473, -473, -473, -473
    },

    {
       29, -474, -474, -474, -474, -474, -474, -474, -474, -474,
     -474, -474, -474, -474, -474, -474, -474, -474, -474, -474,
     -474, -474, -474, -474, -474, -474, -474, -474, -474, -474,
     -474, -474, -474, -474, -474, -474, -474, -474, -474, -474,
     -474, -474, -474, -474, -474, -474, -474, -474,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -474, -474,
     -474, -474, -474, -474, -474,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -474, -474, -474, -474,  174, -474,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -474, -474, -474, -474, -474
    },

    {
       29, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,

     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475,  498,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475, -475, -475,
     -475, -475, -475, -475, -475, -475, -475, -475
    },

    {
       29, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,

     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,
     -476, -476, -476, -476, -476, -476, -476, -476,  499, -476,
     -476, -476, -476, -476, -476, -476, -476, -476, -476, -476,

     -476, -476, -476, -476, -476, -476, -476, -476
    },

    {
       29, -477, -477, -477, -477, -477, -477, -477, -477, -477,
     -477, -477, -477, -477, -477, -477, -477, -477, -477, -477,
     -477, -477, -477, -477, -477, -477, -477, -477, -477, -477,
     -477, -477, -477, -477, -477, -477, -477, -477, -477, -477,
     -477, -477, -477, -477, -477, -477, -477, -477,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -477, -477,
     -477, -477, -477, -477, -477,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -477, -477, -477, -477,  174, -477,  174,  174,  174,
      174,  174,  174,  174,  500,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -477, -477, -477, -477, -477
    },

    {
       29, -478, -478, -478, -478, -478, -478, -478, -478, -478,
     -478, -478, -478, -478, -478, -478, -478, -478, -478, -478,
     -478, -478, -478, -478, -478, -478, -478, -478, -478, -478,
     -478, -478, -478, -478, -478, -478, -478, -478, -478, -478,
     -478, -478, -478, -478, -478, -478, -478, -478,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -478, -478,

     -478, -478, -478, -478, -478,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -478, -478, -478, -478,  174, -478,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  501,  174,  174,
      174,  174,  174, -478, -478, -478, -478, -478
    },

    {
       29,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      480,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479

    },

    {
       29, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,

     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480, -480, -480,
     -480, -480, -480, -480, -480, -480, -480, -480
    },

    {
       29,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      480,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  479,  479,
      479,  479,  479,  479,  479,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  479,  479,  479,  479,  481,  479,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  479,  479,  479,  479,  479
    },

    {
       29, -482, -482, -482, -482, -482, -482, -482, -482, -482,
     -482, -482, -482, -482, -482, -482, -482, -482, -482, -482,
     -482, -482, -482, -482, -482, -482, -482, -482, -482, -482,
     -482, -482, -482, -482, -482, -482, -482, -482, -482, -482,

     -482, -482, -482, -482, -482, -482, -482, -482,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -482, -482,
     -482, -482, -482, -482, -482,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -482, -482, -482, -482,  174, -482,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -482, -482, -482, -482, -482
    },

    {
       29, -483, -483, -483, -483, -483, -483, -483, -483, -483,

     -483, -483, -483, -483, -483, -483, -483, -483, -483, -483,
     -483, -483, -483, -483, -483, -483, -483, -483, -483, -483,
     -483, -483, -483, -483, -483, -483, -483, -483, -483, -483,
     -483, -483, -483, -483, -483, -483, -483, -483,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -483, -483,
     -483, -483, -483, -483, -483,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -483, -483, -483, -483,  174, -483,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  502,  174,  174,  174,
      174,  174,  174, -483, -483, -483, -483, -483
    },

    {
       29, -484, -484, -484, -484, -484, -484, -484, -484, -484,
     -484, -484, -484, -484, -484, -484, -484, -484, -484, -484,
     -484, -484, -484, -484, -484, -484, -484, -484, -484, -484,
     -484, -484, -484, -484, -484, -484, -484, -484, -484, -484,
     -484, -484, -484, -484, -484, -484, -484, -484,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -484, -484,
     -484, -484, -484, -484, -484,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -484, -484, -484, -484,  174, -484,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  503,  174,  174,  174,
      174,  174,  174, -484, -484, -484, -484, -484
    },

    {
       29, -485, -485, -485, -485, -485, -485, -485, -485, -485,
     -485, -485, -485, -485, -485, -485, -485, -485, -485, -485,
     -485, -485, -485, -485, -485, -485, -485, -485, -485, -485,
     -485, -485, -485, -485, -485, -485, -485, -485, -485, -485,
     -485, -485, -485, -485, -485, -485, -485, -485,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -485, -485,
     -485, -485, -485, -485, -485,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -485, -485, -485, -485,  174, -485,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  504,  174,  174,  174,
      174,  174,  174, -485, -485, -485, -485, -485
    },

    {
       29, -486, -486, -486, -486, -486, -486, -486, -486,  486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,

     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486,  486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,
     -486, -486, -486, -486, -486, -486, -486, -486, -486, -486,

     -486, -486, -486, -486, -486, -486, -486, -486
    },

    {
       29, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,

     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487, -487, -487,
     -487, -487, -487, -487, -487, -487,  506, -487, -487, -487,
     -487, -487, -487, -487, -487, -487, -487, -487
    },

    {
       29, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488,  507, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,

     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488, -488, -488,
     -488, -488, -488, -488, -488, -488, -488, -488
    },

    {
       29, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,

     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489,  508, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489, -489, -489,
     -489, -489, -489, -489, -489, -489, -489, -489

    },

    {
       29, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490,  509, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,

     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490, -490, -490,
     -490, -490, -490, -490, -490, -490, -490, -490
    },

    {
       29, -491, -491, -491, -491, -491, -491, -491, -491, -491,
     -491, -491, -491, -491, -491, -491, -491, -491, -491, -491,
     -491, -491, -491, -491, -491, -491, -491, -491, -491, -491,
     -491, -491, -491, -491, -491, -491, -491, -491, -491, -491,
     -491, -491, -491, -491, -491, -491, -491, -491,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -491, -491,
     -491, -491, -491, -491, -491,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -491, -491, -491, -491,  174, -491,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -491, -491, -491, -491, -491
    },

    {
       29, -492, -492, -492, -492, -492, -492, -492, -492, -492,
     -492, -492, -492, -492, -492, -492, -492, -492, -492, -492,
     -492, -492, -492, -492, -492, -492, -492, -492, -492, -492,
     -492, -492, -492, -492, -492, -492, -492, -492, -492, -492,

     -492, -492, -492, -492, -492, -492, -492, -492,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -492, -492,
     -492, -492, -492, -492, -492,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -492, -492, -492, -492,  174, -492,  174,  174,  174,
      174,  510,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -492, -492, -492, -492, -492
    },

    {
       29, -493, -493, -493, -493, -493, -493, -493, -493, -493,

     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,

     -493, -493, -493, -493, -493, -493, -493, -493, -493, -493,
     -493, -493, -493, -493, -493, -493, -493, -493
    },

    {
       29, -494, -494, -494, -494, -494, -494, -494, -494, -494,
     -494, -494, -494, -494, -494, -494, -494, -494, -494, -494,
     -494, -494, -494, -494, -494, -494, -494, -494, -494, -494,
     -494, -494, -494, -494, -494, -494, -494, -494, -494, -494,
     -494, -494, -494, -494, -494, -494, -494, -494,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -494, -494,
     -494, -494, -494, -494, -494,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -494, -494, -494, -494,  174, -494,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  511,  174,  174,  174,  174,
      174,  174,  174, -494, -494, -494, -494, -494
    },

    {
       29, -495, -495, -495, -495, -495, -495, -495, -495, -495,
     -495, -495, -495, -495, -495, -495, -495, -495, -495, -495,
     -495, -495, -495, -495, -495, -495, -495, -495, -495, -495,
     -495, -495, -495, -495, -495, -495, -495, -495, -495, -495,
     -495, -495, -495, -495, -495, -495, -495, -495,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174, -495, -495,
     -495, -495, -495, -495, -495,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -495, -495, -495, -495,  174, -495,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -495, -495, -495, -495, -495
    },

    {
       29, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,

     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,
     -496, -496, -496, -496, -496, -496, -496, -496, -496, -496,

     -496, -496, -496, -496, -496, -496, -496, -496
    },

    {
       29, -497, -497, -497, -497, -497, -497, -497, -497, -497,
     -497, -497, -497, -497, -497, -497, -497, -497, -497, -497,
     -497, -497, -497, -497, -497, -497, -497, -497, -497, -497,
     -497, -497, -497, -497, -497, -497, -497, -497, -497, -497,
     -497, -497, -497, -497, -497, -497, -497, -497,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -497, -497,
     -497, -497, -497, -497, -497,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174, -497, -497, -497, -497,  174, -497,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -497, -497, -497, -497, -497
    },

    {
       29, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,

     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498,  512, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498, -498, -498,
     -498, -498, -498, -498, -498, -498, -498, -498
    },

    {
       29, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,

     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499, -499, -499,
     -499, -499, -499, -499, -499, -499, -499,  513, -499, -499,
     -499, -499, -499, -499, -499, -499, -499, -499

    },

    {
       29, -500, -500, -500, -500, -500, -500, -500, -500, -500,
     -500, -500, -500, -500, -500, -500, -500, -500, -500, -500,
     -500, -500, -500, -500, -500, -500, -500, -500, -500, -500,
     -500, -500, -500, -500, -500, -500, -500, -500, -500, -500,
     -500, -500, -500, -500, -500, -500, -500, -500,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -500, -500,
     -500, -500, -500, -500, -500,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -500, -500, -500, -500,  174, -500,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -500, -500, -500, -500, -500
    },

    {
       29, -501, -501, -501, -501, -501, -501, -501, -501, -501,
     -501, -501, -501, -501, -501, -501, -501, -501, -501, -501,
     -501, -501, -501, -501, -501, -501, -501, -501, -501, -501,
     -501, -501, -501, -501, -501, -501, -501, -501, -501, -501,
     -501, -501, -501, -501, -501, -501, -501, -501,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -501, -501,
     -501, -501, -501, -501, -501,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -501, -501, -501, -501,  174, -501,  174,  174,  174,
      174,  514,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -501, -501, -501, -501, -501
    },

    {
       29, -502, -502, -502, -502, -502, -502, -502, -502, -502,
     -502, -502, -502, -502, -502, -502, -502, -502, -502, -502,
     -502, -502, -502, -502, -502, -502, -502, -502, -502, -502,
     -502, -502, -502, -502, -502, -502, -502, -502, -502, -502,

     -502, -502, -502, -502, -502, -502, -502, -502,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -502, -502,
     -502, -502, -502, -502, -502,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -502, -502, -502, -502,  174, -502,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -502, -502, -502, -502, -502
    },

    {
       29, -503, -503, -503, -503, -503, -503, -503, -503, -503,

     -503, -503, -503, -503, -503, -503, -503, -503, -503, -503,
     -503, -503, -503, -503, -503, -503, -503, -503, -503, -503,
     -503, -503, -503, -503, -503, -503, -503, -503, -503, -503,
     -503, -503, -503, -503, -503, -503, -503, -503,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -503, -503,
     -503, -503, -503, -503, -503,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -503, -503, -503, -503,  174, -503,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -503, -503, -503, -503, -503
    },

    {
       29, -504, -504, -504, -504, -504, -504, -504, -504, -504,
     -504, -504, -504, -504, -504, -504, -504, -504, -504, -504,
     -504, -504, -504, -504, -504, -504, -504, -504, -504, -504,
     -504, -504, -504, -504, -504, -504, -504, -504, -504, -504,
     -504, -504, -504, -504, -504, -504, -504, -504,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -504, -504,
     -504, -504, -504, -504, -504,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -504, -504, -504, -504,  174, -504,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -504, -504, -504, -504, -504
    },

    {
       29, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505, -505, -505,
     -505, -505, -505, -505, -505, -505, -505, -505
    },

    {
       29, -506, -506, -506, -506, -506, -506, -506, -506,  516,
     -506,  516,  516,  516, -506, -506, -506, -506, -506, -506,

     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506,  516, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506,  517, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,
     -506, -506, -506, -506, -506, -506, -506, -506, -506, -506,

     -506, -506, -506, -506, -506, -506, -506, -506
    },

    {
       29, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507,  518, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,

     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507, -507, -507,
     -507, -507, -507, -507, -507, -507, -507, -507
    },

    {
       29, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,

     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508, -508, -508,
     -508, -508, -508, -508, -508, -508, -508, -508
    },

    {
       29, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,

     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509, -509, -509,
     -509, -509, -509, -509, -509, -509, -509, -509

    },

    {
       29, -510, -510, -510, -510, -510, -510, -510, -510, -510,
     -510, -510, -510, -510, -510, -510, -510, -510, -510, -510,
     -510, -510, -510, -510, -510, -510, -510, -510, -510, -510,
     -510, -510, -510, -510, -510, -510, -510, -510, -510, -510,
     -510, -510, -510, -510, -510, -510, -510, -510,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -510, -510,
     -510, -510, -510, -510, -510,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -510, -510, -510, -510,  174, -510,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -510, -510, -510, -510, -510
    },

    {
       29, -511, -511, -511, -511, -511, -511, -511, -511, -511,
     -511, -511, -511, -511, -511, -511, -511, -511, -511, -511,
     -511, -511, -511, -511, -511, -511, -511, -511, -511, -511,
     -511, -511, -511, -511, -511, -511, -511, -511, -511, -511,
     -511, -511, -511, -511, -511, -511, -511, -511,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -511, -511,
     -511, -511, -511, -511, -511,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -511, -511, -511, -511,  174, -511,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  519,  174,  174,  174,  174,
      174,  174,  174, -511, -511, -511, -511, -511
    },

    {
       29, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,

     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512, -512, -512,
     -512, -512, -512, -512, -512, -512, -512, -512
    },

    {
       29, -513, -513, -513, -513, -513, -513, -513, -513, -513,

     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513,  520, -513, -513, -513, -513, -513, -513, -513, -513,

     -513, -513, -513, -513, -513, -513, -513, -513, -513, -513,
     -513, -513, -513, -513, -513, -513, -513, -513
    },

    {
       29, -514, -514, -514, -514, -514, -514, -514, -514, -514,
     -514, -514, -514, -514, -514, -514, -514, -514, -514, -514,
     -514, -514, -514, -514, -514, -514, -514, -514, -514, -514,
     -514, -514, -514, -514, -514, -514, -514, -514, -514, -514,
     -514, -514, -514, -514, -514, -514, -514, -514,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -514, -514,
     -514, -514, -514, -514, -514,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -514, -514, -514, -514,  174, -514,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  521,  174,  174,  174,  174,
      174,  174,  174, -514, -514, -514, -514, -514
    },

    {
       29, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,

     -515, -515, -515, -515, -515, -515, -515, -515,  522, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515, -515, -515,
     -515, -515, -515, -515, -515, -515, -515, -515
    },

    {
       29, -516, -516, -516, -516, -516, -516, -516, -516,  516,
     -516,  516,  516,  516, -516, -516, -516, -516, -516, -516,

     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516,  516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516,  517, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,
     -516, -516, -516, -516, -516, -516, -516, -516, -516, -516,

     -516, -516, -516, -516, -516, -516, -516, -516
    },

    {
       29, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,

     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517, -517, -517,
     -517, -517, -517, -517, -517, -517, -517, -517
    },

    {
       29, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,

     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518, -518, -518,
     -518, -518, -518, -518, -518, -518, -518, -518
    },

    {
       29, -519, -519, -519, -519, -519, -519, -519, -519, -519,
     -519, -519, -519, -519, -519, -519, -519, -519, -519, -519,
     -519, -519, -519, -519, -519, -519, -519, -519, -519, -519,

     -519, -519, -519, -519, -519, -519, -519, -519, -519, -519,
     -519, -519, -519, -519, -519, -519, -519, -519,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -519, -519,
     -519, -519, -519, -519, -519,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -519, -519, -519, -519,  174, -519,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -519, -519, -519, -519, -519

    },

    {
       29, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,

     -520, -520, -520, -520, -520, -520, -520, -520, -520, -520,
     -520, -520, -520, -520, -520,  523, -520, -520, -520, -520,
     -520, -520, -520, -520, -520, -520, -520, -520
    },

    {
       29, -521, -521, -521, -521, -521, -521, -521, -521, -521,
     -521, -521, -521, -521, -521, -521, -521, -521, -521, -521,
     -521, -521, -521, -521, -521, -521, -521, -521, -521, -521,
     -521, -521, -521, -521, -521, -521, -521, -521, -521, -521,
     -521, -521, -521, -521, -521, -521, -521, -521,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174, -521, -521,
     -521, -521, -521, -521, -521,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174, -521, -521, -521, -521,  174, -521,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174, -521, -521, -521, -521, -521
    },

    {
       29, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,

     -522, -522, -522, -522, -522, -522, -522, -522,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522, -522, -522,
     -522, -522, -522, -522, -522, -522, -522, -522
    },

    {
       29, -523, -523, -523, -523, -523, -523, -523, -523, -523,

     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,

     -523, -523, -523, -523, -523, -523, -523, -523, -523, -523,
     -523, -523, -523, -523, -523, -523, -523, -523
    },

    {
       29, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,

     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524, -524, -524,
     -524, -524, -524, -524, -524, -524, -524, -524
    },

    {
       29, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,

     -525, -525, -525, -525, -525, -525, -525, -525,  526, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525, -525, -525,
     -525, -525, -525, -525, -525, -525, -525, -525
    },

    {
       29, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,

     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,
     -526, -526, -526, -526, -526, -526, -526, -526, -526, -526,

     -526, -526, -526, -526, -526, -526, -526, -526
    },

    {
       29, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,

     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527, -527, -527,
     -527, -527, -527, -527, -527, -527, -527, -527
    },

    {
       29, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528,  529, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,

     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528, -528, -528,
     -528, -528, -528, -528, -528, -528, -528, -528
    },

    {
       29, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,

     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529, -529, -529,
     -529, -529, -529, -529, -529, -529, -529, -529

    },

    {
       29, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,

     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530, -530, -530,
     -530, -530, -530, -530, -530, -530, -530, -530
    },

    } ;

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, yyg->yytext_ptr, yyleng + 1 , yyscanner); \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 198
#define YY_END_OF_BUFFER 199
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[531] =
    {   0,
        0,    0,    0,    0,   72,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  199,  197,
       78,   76,  149,   96,  180,  197,  197,  140,  159,  160,
      151,  152,  163,  154,  128,  153,  131,  131,  131,  131,
      164,   77,  143,  156,  142,  196,  157,  158,  155,    7,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  161,  141,  162,  150,
       78,  149,   71,  196,  196,   66,   68,   67,   72,   73,
       16,   11,   12,   14,   10,   15,   18,   18,   17,   17,

      198,   25,   27,   24,   23,   19,   26,  153,  196,  196,
      196,  196,  196,   35,  196,   42,   52,   49,   48,   52,
       52,   50,   51,   46,   57,   54,   53,   56,   63,   60,
      198,   62,    6,    3,  198,  112,  101,  100,  198,  111,
       97,   95,   85,  198,  198,   94,   80,   78,  147,  179,
        8,    9,    0,    0,    0,    0,    0,    0,    0,  134,
       64,   70,  173,  130,    0,    0,  131,    0,    0,   77,
      145,  146,  144,  196,    0,    0,   79,  196,    0,  196,
      196,  186,  165,  196,  196,  196,  196,  196,    0,  166,
      196,  196,  136,  137,  196,  196,  196,  196,    0,  196,

      196,    0,  196,  196,  196,  196,  196,  188,    0,  148,
       78,    0,    0,   74,  147,  196,  196,   66,   68,   65,
       72,   16,   13,   17,   25,   20,   21,   22,    0,  196,
      196,  196,  196,   41,  196,   43,   52,   49,   44,   45,
       47,   57,   54,   55,   63,   60,   59,   58,   61,    6,
        3,    4,    0,  112,   98,   99,  110,  102,  104,  103,
      108,  109,  105,  107,  106,   95,   84,   83,   81,   82,
       93,   86,   87,   91,   92,   88,   90,   89,    0,  117,
        0,    0,  116,  118,    0,    0,    0,  132,  132,  130,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  133,

      129,  131,  138,    0,    0,  196,    0,    0,    0,  171,
      167,  196,  196,  182,  196,  196,  196,  196,    0,    0,
      173,  120,  196,  196,  196,  196,  196,    0,    0,  176,
      184,  196,  124,  196,    1,    0,  196,  196,  196,  196,
      196,  196,  196,    5,    2,    0,  118,    0,  134,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      127,    0,  196,    0,    0,    0,    0,  196,  119,  196,
      196,  196,  196,  196,    0,    0,    0,    0,  196,  121,
      196,  196,  196,    0,    0,    0,    0,  196,  196,  125,
      126,  196,    0,  196,   34,  196,  196,  196,  196,  196,

      196,  115,  115,  115,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  195,    0,    0,
        0,    0,  196,  196,  196,  196,  122,  193,    0,    0,
      174,    0,  196,  196,  189,  196,    0,    0,  177,    0,
      196,  196,  135,    0,   34,  196,   33,  196,  196,   36,
      196,  196,  196,  113,    0,  172,    0,    0,    0,  187,
      196,  196,  123,    0,    0,    0,  196,  194,  196,    0,
        0,    0,  196,  191,    0,   33,  196,   32,    0,   75,
      196,   37,  196,  196,  196,    0,    0,    0,    0,    0,
      181,  196,  175,  196,  185,  178,  183,    0,   32,   28,

       31,   39,   40,   38,    0,    0,    0,  168,  169,  190,
      196,   28,   31,   30,    0,    0,  139,  170,  192,   30,
       29,    0,   29,    0,  114,    0,    0,  114,    0,  114
    } ;

static const yy_state_type yy_NUL_trans[531] =
    {   0,
       30,   30,   86,   86,   89,   89,   91,   91,   97,   97,
      102,  102,   30,   30,   30,   30,  117,  117,  125,  125,
      129,  129,  133,  133,  136,  136,  142,  142,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  213,    0,    0,    0,  218,    0,    0,  221,    0,
      222,    0,    0,  223,    0,    0,    0,    0,    0,    0,

        0,  225,    0,    0,  228,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  237,    0,    0,  237,
      237,    0,    0,  237,  242,    0,    0,    0,  245,    0,
      247,    0,  250,    0,  252,  254,    0,    0,    0,  257,
        0,  266,    0,  267,    0,  271,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  288,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  213,    0,  213,    0,    0,  218,    0,    0,
      221,  222,    0,    0,  225,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  237,    0,  237,  237,
        0,  242,    0,    0,  245,    0,  247,    0,    0,  250,
        0,    0,  344,  254,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  266,  267,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  288,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  479,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  479,    0,
      479,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

#line 1 "ado.fl"
#line 9 "ado.fl"
#if __cplusplus > 199711L
#define register      // Deprecated in C++11.
#endif  // #if __cplusplus > 199711L

#include <cstring>
#include <climits>
#include <cstdlib>

#include <algorithm>
#include <stack>
#include <vector>
#include <iostream>
#include <string>

#include <Rcpp.h>

#include "Ado.hpp"
#include "ado.tab.hpp"
#include "AdoDriver.hpp"
#include "utils.hpp"

#ifndef YYSTYPE
#define YYSTYPE yy::AdoParser::semantic_type
#endif

// We really, really can't have the scanner calling exit() and
// killing the R process, so let's use our own friendlier routine.
// If the issue is memory exhaustion, the R interpreter overall will
// have run out of memory and will handle it however it's going to.
#ifdef YY_FATAL_ERROR
#undef YY_FATAL_ERROR
#endif

#define YY_FATAL_ERROR(msg) ado_yy_fatal_error(msg)

// Make yytext big enough to hold a macro replacement text as large as
// the ones Stata allows
#ifdef YYLMAX
#undef YYLMAX
#endif

#define YYLMAX 65536

// our error handling routine for fatal errors, defined below
void ado_yy_fatal_error(std::string& msg);
void ado_yy_fatal_error(const char *msg);

// the ado_yy_fatal_error function uses this function to stop execution
void raise_condition(const std::string& msg, const std::string& type);

typedef yy::AdoParser::token token;

// Should we echo the matched text to Rcpp::Rcout? It's
// necessary for logging and for printing commands run in do-files.
#define R_ECHO(val) if(driver.echo) \
                    { \
                        std::string tmp = std::string(val); \
                        \
                        if(tmp.length() >= macro_length) \
                        { \
                            tmp = tmp.erase(0, macro_length); \
                            macro_length = 0; \
                            driver.push_echo_text(tmp); \
                        } else \
                        { \
                            macro_length -= tmp.length(); \
                        } \
                        \
                    }

// Code run each time a pattern is matched
#define YY_USER_ACTION  { llocp->columns(yyleng); }
#line 9764 "../lex.yy.cpp"

#line 9766 "../lex.yy.cpp"

#define INITIAL 0
#define LONG_COMMENT 1
#define SHORT_COMMENT 2
#define LOCAL_MACRO 3
#define GMACRO_ALPHA 4
#define GMACRO_BRACE 5
#define FOREACH 6
#define FORVALUES 7
#define ACCUMULATE 8
#define STRING_ACCUMULATE 9
#define CDQUOTE_ACCUMULATE 10
#define EMBED 11
#define STRING 12
#define CDQUOTE 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char yytext_r[YYLMAX];
    char *yytext_ptr;
    int yy_more_offset;
    int yy_prev_more_offset;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 113 "ado.fl"



#line 117 "ado.fl"
// Code run each time yylex is called
llocp->step();

// Buffers and stacks for state machines
std::string embed_buf;
std::string cdquote_buf;
std::string string_buf;

// Loop objects
std::string loop_buf;
int brace_count = 0;

std::stack<std::vector<std::string>> macro_stack;

// We don't want to echo text resulting from macro expansions, so
// let's keep track of how much of it there is so the R_ECHO macro can
// avoid outputting it.
size_t macro_length = 0;

                                    /* if you write {{{ ... }}}, the ... will be executed as R code */
#line 10072 "../lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ YY_SC_TO_UI(*yy_cp) ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 137 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        embed_buf.clear();
                                        yy_push_state(EMBED, yyscanner);
                                    }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 144 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_pop_state(yyscanner);

                                        ExprNode *node = new ExprNode("ado_embedded_code");
                                        node->addData("value", std::string(embed_buf));
                                        node->addData("lang", "R");

                                        yylval->node = node;
                                        return token::TOK_EMBEDDED_CODE;
                                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 157 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng);
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 163 "ado.fl"
{ 
                                        R_ECHO(yytext);
                                        
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 168 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 173 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(EMBED):
#line 179 "ado.fl"
{
                                        embed_buf.clear();
                                        yy_pop_state(yyscanner);
                                        
                                        driver.error(*llocp, "Unclosed embed block");
                                        yyterminate();
                                    }
	YY_BREAK

/* INITIAL rules to match macros, local and global */
case 7:
YY_RULE_SETUP
#line 191 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 203 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 215 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
/* Rules for while within optionally nested local macros */

case 10:
YY_RULE_SETUP
#line 232 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
/* Local macros can't include newlines */
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 243 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(1);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed local macro");
                                        yyterminate();
                                    }
	YY_BREAK
/* We've reached the matching close quote - let's expand the macro */
case 12:
YY_RULE_SETUP
#line 260 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;
                                        
                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        combined = std::string("_") + combined; // local macros start with a "_"
                                        
                                        replacement = driver.get_macro_value(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);

                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 294 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext + 1)); // a string w/o the first char
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 304 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string("\\"));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 314 "ado.fl"
{
                                        // These macros can't contain braces because the braces might
                                        // not be balanced, which would greatly complicate parsing loops
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Invalid character in local macro");
                                        yyterminate();
                                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 329 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* This is an error (failing to close the macro) */
case YY_STATE_EOF(LOCAL_MACRO):
#line 341 "ado.fl"
{
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed local macro");
                                        yyterminate();
                                    }
	YY_BREAK

/* Rules for global macros of the form \$[:alnum:]+
                                     * This is a bit overcomplicated for just these macros, honestly, but
                                     * it uses the same state machine setup as for the more complicated
                                     * GMACRO_BRACE and LOCAL_MACRO cases, and lets us just push a GMACRO_ALPHA
                                     * state within either of those instead of duplicating this code. */

/* A global macro name that doesn't need to be disambiguated with braces */
case 17:
YY_RULE_SETUP
#line 361 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* Any other character is a delimiter - we're at the end of the macro */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 373 "ado.fl"
{
                                        // don't R_ECHO because we're unputting the matched text to process again

                                        if(yytext[0] == '\n')
                                            llocp->lines(1);
                                        
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;

                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        
                                        replacement = driver.get_macro_value(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            unput(yytext[0]); // we never saw this character
                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            unput(yytext[0]); // we never saw this character
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);
                                            
                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK
/* EOF is also a delimiter, but flex won't allow it in a normal rule */
case YY_STATE_EOF(GMACRO_ALPHA):
#line 412 "ado.fl"
{
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;

                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        
                                        replacement = driver.get_macro_value(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);
                                            
                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK

/* The style of global macro with matching braces to allow other macros
                                     * to be expanded and incorporated into a global's name. */

/* Allow any type of macro to be nested here */
case 19:
YY_RULE_SETUP
#line 450 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 20:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 459 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 468 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 477 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext + 1)); // a string w/o the first char
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 487 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string("\\"));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 498 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* Characters that should be part of the name */
case 25:
YY_RULE_SETUP
#line 510 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* We've seen the closing brace - wrap up and expand this macro */
case 26:
YY_RULE_SETUP
#line 522 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;

                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        
                                        replacement = driver.get_macro_value(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);
                                            
                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK
/* newline here is an error - these macros can't cross lines */
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 556 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(1);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed brace-delimited global macro");
                                        yyterminate();
                                    }
	YY_BREAK
/* EOF here is an error - the user forgot the closing "}" */
case YY_STATE_EOF(GMACRO_BRACE):
#line 573 "ado.fl"
{
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed brace-delimited global macro");
                                        yyterminate();
                                    }
	YY_BREAK

/* Loops, which in Stata are not loops in the usual sense.
                                     * A Stata loop is a directive to the macro processor (this
                                     * scanner, in this case) to bind a macro name over a set of
                                     * values and for each such value, reparse and execute a block
                                     * of text containing the macro.
                                     
                                     * The basic idea here is this: once we see one of the looping
                                     * keywords foreach or forvalues, specially lex a) the macro name,
                                     * b) the set of values it should range over, c) the block of text
                                     * and pass those things as appropriate tokens to the parser. The parser
                                     * forms the appropriate productions from them, and their associated
                                     * ExprNode objects will be passed up to the R layer for execution. The
                                     * functions that implement them set up the macro context, and for each
                                     * value of the macro, invoke a new parser/scanner instance to reparse
                                     * and execute the text block. If there are nested loops, there can be
                                     * three or more scanners running at once, in interleaved timeslices.
                                     * (That's why it's so important that both the parser and the scanner be
                                     * reentrant, even though R isn't multithreaded.) */
case 28:
YY_RULE_SETUP
#line 605 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FOREACH, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_foreach"});
                                        return token::TOK_FOREACH;
                                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 614 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 623 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 632 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 641 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 650 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 659 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK

case 35:
YY_RULE_SETUP
#line 672 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        loop_buf.clear();
                                        yy_push_state(ACCUMULATE, yyscanner);

                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACE;
                                    }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 681 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_LOCAL;
                                    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 685 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_GLOBAL;
                                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 689 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_VARLIST;
                                    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 693 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_NEWLIST;
                                    }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 697 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_NUMLIST;
                                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 701 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_OF;
                                    }
	YY_BREAK
case YY_STATE_EOF(FOREACH):
#line 705 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Foreach loop without a statement body");
                                        yyterminate();
                                    }
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 719 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(ACCUMULATE, yyscanner);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACE;
                                    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 728 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_TO;
                                    }
	YY_BREAK
case YY_STATE_EOF(FORVALUES):
#line 732 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Foreach loop without a statement body");
                                        yyterminate();
                                    }
	YY_BREAK


/* We never need to execute comments, and they can contain unmatched braces,
                                     * so just eat them now, exactly as usual */
case 44:
YY_RULE_SETUP
#line 748 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yy_push_state(LONG_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 752 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 756 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 761 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf.clear();
                                        yy_push_state(CDQUOTE_ACCUMULATE, yyscanner);
                                    }
	YY_BREAK
/* Strings may contain unbalanced braces, so we need some subsidiary states
                                     * to handle them without confusing the brace counting code. We can't use the
                                     * usual string states because a) they don't append to loop_buf, but more
                                     * fundamentally because b) they'll process backslash escapes, which in this context
                                     * we want to defer until the subsequent reinvocation of the frontend on this text block. */
case 48:
YY_RULE_SETUP
#line 773 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf.clear();
                                        yy_push_state(STRING_ACCUMULATE, yyscanner);
                                    }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 779 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 785 "ado.fl"
{
                                        R_ECHO(yytext);

                                        brace_count++;
                                        loop_buf += yytext[0];
                                    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 791 "ado.fl"
{
                                        // don't R_ECHO because we're going to unput the matched text to process again

                                        // This is not a mistake: it should be -1 rather than 0, because the brace_count
                                        // variable is set to 0 when yylex starts up, and we want to see one more closing
                                        // brace than we've seen opening braces. (Its matching opening brace is consumed
                                        // in the FOREACH or FORVALUES states before we get here, but setting brace_count
                                        // there won't persist to this invocation unless we do something not thread-safe 
                                        // and make brace_count static.)
                                        brace_count--;
                                        if(brace_count > -1)
                                        {
                                            loop_buf += yytext[0];
                                        } else if(brace_count == -1)
                                        {
                                            yy_pop_state(yyscanner); // back to FOREACH or FORVALUES
                                            yy_pop_state(yyscanner); // back to INITIAL

                                            unput(yytext[0]); // we want to re-scan this because the parser expects a "}"

                                            // construct a string literal token from loop_buf and return it
                                            std::string *s = new std::string(loop_buf);
                                            yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                            yylval->node->addData("value", *s);

                                            return token::TOK_STRING_LITERAL;
                                        } else // brace_count < -1
                                        {
                                            // too many braces
                                            do {
                                                yy_pop_state(yyscanner);
                                            } while(yy_top_state(yyscanner) != INITIAL);
                                            
                                            driver.error(*llocp, "Invalid statement body for loop");
                                            yyterminate();
                                        }
                                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 828 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(ACCUMULATE):
#line 834 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Loop statement without a closing brace");
                                        yyterminate();
                                    }
	YY_BREAK


/* Saw the matching close quote - all done */
case 53:
YY_RULE_SETUP
#line 849 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);

                                        yy_pop_state(yyscanner);
                                    }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 856 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 869 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 873 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 878 "ado.fl"
{
                                        // this rule is the entire reason for this state - it matches
                                        // opening curly braces but doesn't increment brace_count
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(STRING_ACCUMULATE):
#line 885 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK


/* Saw the matching close quote - all done */
case 58:
YY_RULE_SETUP
#line 900 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);

                                        yy_pop_state(yyscanner);
                                    }
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 907 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 912 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 925 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 929 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 934 "ado.fl"
{
                                        // once again, the fact that this rule matches the "{" character
                                        // but doesn't increment brace_count is why we have this state
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(CDQUOTE_ACCUMULATE):
#line 941 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        driver.error(*llocp, "Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK

/* Eat long comments */
case 64:
YY_RULE_SETUP
#line 955 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_push_state(LONG_COMMENT, yyscanner);
                                    }
	YY_BREAK

/* Got a close-comment marker, all done */
case 65:
YY_RULE_SETUP
#line 962 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_pop_state(yyscanner);
                                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 968 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        /* Eat this chunk of comment */
                                    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 973 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        /* Eat a single asterisk */
                                    }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 978 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng);
                                    }
	YY_BREAK
case YY_STATE_EOF(LONG_COMMENT):
#line 984 "ado.fl"
{
                                        yy_pop_state(yyscanner);
                                        driver.error(*llocp, "Unclosed comment");
                                        yyterminate();
                                    }
	YY_BREAK

/* Allow a triple slash at EOL as a line extender */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 994 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng); llocp->step();
                                    }
	YY_BREAK
/* Eat short comments */
case 70:
YY_RULE_SETUP
#line 1003 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1008 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK

case 72:
YY_RULE_SETUP
#line 1014 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        /* eat anything but a newline */
                                    }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1019 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_pop_state(yyscanner);
                                        llocp->lines(1);
                                        return token::TOK_NEWLINE;
                                    }
	YY_BREAK
case YY_STATE_EOF(SHORT_COMMENT):
#line 1026 "ado.fl"
{
                                        // one-line comments can be the last thing in the file
                                        yy_pop_state(yyscanner);
                                        llocp->lines(1);
                                        
                                        // unput the newline that the grammar expects will be here
                                        unput('\n');
                                    }
	YY_BREAK

/* similarly, lines that start with "!" or "shell" are sh commands */
case 74:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1039 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::string n = s->substr(1, s->size());

                                        yylval->node = new ExprNode("ado_embedded_code");
                                        yylval->node->addData("value", n);
                                        yylval->node->addData("lang", "shell");
                                        return token::TOK_EMBEDDED_CODE;
                                    }
	YY_BREAK
case 75:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1050 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::string n = s->substr(5, s->size());

                                        yylval->node = new ExprNode("ado_embedded_code");
                                        yylval->node->addData("value", n);
                                        yylval->node->addData("type", "shell");
                                        return token::TOK_EMBEDDED_CODE;
                                    }
	YY_BREAK
/* Statement separators; consider more than one in a row to be one */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1065 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        llocp->lines(yyleng);
                                        return token::TOK_NEWLINE;
                                    }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1072 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_SEMICOLON;
                                    }
	YY_BREAK
/* ignore whitespace but track column numbers */
case 78:
YY_RULE_SETUP
#line 1080 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->step();
                                    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1087 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf.clear();
                                        yy_push_state(CDQUOTE, yyscanner);
                                    }
	YY_BREAK

/* Allow any type of macro to be nested here */
case 80:
YY_RULE_SETUP
#line 1095 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 81:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1104 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1113 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
/* Saw the matching close quote - all done */
case 83:
YY_RULE_SETUP
#line 1124 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(cdquote_buf);
                                        yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                        yylval->node->addData("value", *s);

                                        yy_pop_state(yyscanner);
                                        return token::TOK_STRING_LITERAL;
                                    }
	YY_BREAK
case 84:
/* rule 84 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1135 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += std::string(yytext);
                                    }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1141 "ado.fl"
{
                                        // this is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        cdquote_buf.clear();
                                        yy_pop_state(yyscanner);

                                        driver.error(*llocp, "Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1153 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '$';
                                    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1158 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '`';
                                    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1163 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\n';
                                    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1168 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\t';
                                    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1173 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\r';
                                    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1178 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\b';
                                    }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1183 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\f';
                                    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1188 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += yytext[1];
                                    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1193 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\\';
                                    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1199 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(CDQUOTE):
#line 1205 "ado.fl"
{
                                        cdquote_buf.clear();
                                        yy_pop_state(yyscanner);

                                        driver.error(*llocp, "Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK

case 96:
YY_RULE_SETUP
#line 1214 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf.clear();
                                        yy_push_state(STRING, yyscanner);
                                    }
	YY_BREAK

/* Allow any type of macro to be nested here */
case 97:
YY_RULE_SETUP
#line 1222 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 98:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1231 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1240 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
/* Saw the matching close quote - all done */
case 100:
YY_RULE_SETUP
#line 1251 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(string_buf);
                                        yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                        yylval->node->addData("value", *s);

                                        yy_pop_state(yyscanner);
                                        return token::TOK_STRING_LITERAL;
                                    }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1262 "ado.fl"
{
                                        // this is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        string_buf.clear();
                                        yy_pop_state(yyscanner);

                                        driver.error(*llocp, "Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1274 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '"';
                                    }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1279 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '`';
                                    }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1284 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '$';
                                    }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1289 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\n';
                                    }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1294 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\t';
                                    }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1299 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\r';
                                    }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1304 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\b';
                                    }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1309 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\f';
                                    }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1314 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += yytext[1];
                                    }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1319 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\\';
                                    }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1325 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 1331 "ado.fl"
{
                                        string_buf.clear();
                                        yy_pop_state(yyscanner);

                                        driver.error(*llocp, "Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK

/* datetime literals */
case 113:
YY_RULE_SETUP
#line 1343 "ado.fl"
{
                                       R_ECHO(yytext);
                                   
                                       yylval->node = new ExprNode({"ado_literal", "ado_datetime"});

                                       std::string *s = new std::string(yytext);
                                       s->append(" 00:00:00");

                                       yylval->node->addData("value", *s);
                                       return token::TOK_DATE;
                                   }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1354 "ado.fl"
{
                                                            R_ECHO(yytext);
                                        
                                                            yylval->node = new ExprNode({"ado_literal", "ado_datetime"});

                                                            std::string *s = new std::string(yytext);
                                                            yylval->node->addData("value", *s);
                                                            return token::TOK_DATETIME;
                                                        }
	YY_BREAK
/* format specifiers */
case 115:
YY_RULE_SETUP
#line 1367 "ado.fl"
{
                                        // numeric formats
                                        R_ECHO(yytext);
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        
                                        return token::TOK_NUMBER_FORMAT;
                                    }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1377 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        
                                        return token::TOK_NUMBER_FORMAT;
                                    }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1386 "ado.fl"
{
                                        // string formats
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        return token::TOK_STRING_FORMAT;
                                    }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1396 "ado.fl"
{
                                        // datetime formats
                                        R_ECHO(yytext);
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        
                                        return token::TOK_DATETIME_FORMAT;
                                    }
	YY_BREAK
/* Numeric data types */
case 119:
YY_RULE_SETUP
#line 1410 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_BYTE;
                                    }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1416 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_INT;
                                    }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1422 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LONG;
                                    }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1428 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_FLOAT;
                                    }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1434 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_DOUBLE;
                                    }
	YY_BREAK
/* String data types */
case 124:
YY_RULE_SETUP
#line 1444 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STRING_TYPE_SPEC;
                                    }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1450 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STRING_TYPE_SPEC;
                                    }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1456 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STRING_TYPE_SPEC;
                                    }
	YY_BREAK
/* We need to specially lex this token to get it recognized,
                                     * before we lex numbers */
case 127:
YY_RULE_SETUP
#line 1465 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_ident"});

                                        yylval->node->addData("value", *(new std::string("tsls")));
                                        return token::TOK_TSLS;
                                    }
	YY_BREAK
/* numeric literals in their various formats */
case 128:
YY_RULE_SETUP
#line 1476 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_PERIOD;
                                    }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1484 "ado.fl"
{ /* hex */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1492 "ado.fl"
{ /* octal */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1500 "ado.fl"
{ /* decimal integer */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1508 "ado.fl"
{ /* decimal float */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1516 "ado.fl"
{ /* scientific notation */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1524 "ado.fl"
{ /* scientific notation with fractions, or numbers like ".0239" */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
/* Other keywords */
case 135:
YY_RULE_SETUP
#line 1536 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_USING;
                                    }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1542 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_IF;
                                    }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1548 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_IN;
                                    }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1554 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_MERGE_SPEC;
                                        }
	YY_BREAK
/* Weight-clause specifiers (this is a hack) */
case 139:
YY_RULE_SETUP
#line 1565 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *clause = new ExprNode("ado_weight_clause");
                                        ExprNode *kind = new ExprNode({"ado_literal", "ado_ident"});
                                        std::string *s = new std::string(yytext);

                                        // remove the first and last characters of the string
                                        s->pop_back();
                                        std::string n0 = s->substr(1, s->size());

                                        kind->addData("value", trim(n0));
                                        clause->appendChild("left", kind);

                                        yylval->node = clause;
                                        return token::TOK_WEIGHT_SPEC;
                                    }
	YY_BREAK
/* infix operators and various single-character tokens */
case 140:
YY_RULE_SETUP
#line 1586 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_AND_OP;
                                    }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1592 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_OR_OP;
                                    }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1598 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_GT_OP;
                                    }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1604 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LT_OP;
                                    }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1610 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_GE_OP;
                                    }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1616 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LE_OP;
                                    }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1622 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_EQ_OP;
                                    }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1628 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NE_OP;
                                    }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1634 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NE_OP;
                                    }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1640 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NEG_OP;
                                    }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1646 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NEG_OP;
                                    }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1653 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STAR;
                                    }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1659 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_PLUS;
                                    }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1665 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_SLASH;
                                    }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1671 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_MINUS;
                                    }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1677 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_CARET;
                                    }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1683 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_ASSIGN;
                                    }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1689 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACKET;
                                    }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1695 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_RBRACKET;
                                    }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1701 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LPAREN;
                                    }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1707 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_RPAREN;
                                    }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1713 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACE;
                                    }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1719 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_RBRACE;
                                    }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1725 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_COMMA;
                                    }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1731 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_COLON;
                                    }
	YY_BREAK
/* Factor variable operators and level-restricted virtual variables */
case 165:
YY_RULE_SETUP
#line 1739 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_continuous_expression"});
                                        yylval->node->addData("verb", "c.");

                                        return token::TOK_CONT_OPERATOR;
                                    }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1747 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1756 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "n");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1765 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "freq");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1774 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "last");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1783 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "first");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1792 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");

                                        if(s->at(0) == 'i')
                                          yylval->node->addData("level", s->substr(2, s->length() - 1));
                                        else
                                          yylval->node->addData("level", s->substr(1, s->length() - 1));

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1807 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");

                                        if(s->at(0) == 'i')
                                          yylval->node->addData("level", s->substr(4, s->length() - 2));
                                        else
                                          yylval->node->addData("level", s->substr(3, s->length() - 2));

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1823 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");
                                        yylval->node->addData("level", s->substr(1, s->length() - 1));

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1834 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x = split(s->substr(2, s->length() - 2), ' ');

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");

                                        for(auto elem : x)
                                        {
                                            if(!elem.empty())
                                                yylval->node->addData("level" + elem, elem); // hacky, but oh well
                                        }

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1851 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x = split(s->substr(2, s->length() -2), '/');
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");

                                        yylval->node->addData("levelstart", trim(x[0]));
                                        yylval->node->addData("levelend", trim(x[1]));

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1865 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_omit_expression"});
                                        yylval->node->addData("verb", "o.");

                                        if(s->at(0) == 'i')
                                          yylval->node->addData("level", s->substr(2, s->length() - 1));
                                        else
                                          yylval->node->addData("level", s->substr(1, s->length() - 1));

                                        return token::TOK_OMIT_OPERATOR;
                                    }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1880 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x;

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_omit_expression"});
                                        yylval->node->addData("verb", "o.");

                                        if(s->at(0) == 'i')
                                            x = split(s->substr(3, s->length() -2), ' ');
                                        else
                                            x = split(s->substr(2, s->length() -2), ' ');

                                        for(auto elem : x)
                                        {
                                            if(!elem.empty())
                                                yylval->node->addData("level" + elem, elem); // hacky, but oh well
                                        }

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1902 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x;

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_omit_expression"});
                                        yylval->node->addData("verb", "o.");

                                        if(s->at(0) == 'i')
                                            x = split(s->substr(3, s->length() -2), '/');
                                        else
                                            x = split(s->substr(2, s->length() -2), '/');

                                        yylval->node->addData("levelstart", trim(x[0]));
                                        yylval->node->addData("levelend", trim(x[1]));

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1922 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_FACT_CROSS;
                                    }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1928 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_CROSS;
                                    }
	YY_BREAK
/* command verbs that have to be hardcoded into the grammar */
case 181:
YY_RULE_SETUP
#line 1938 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_CAPTURE;
                                    }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1947 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", "capture");

                                        yylval->node = verb;
                                        return token::TOK_CAPTURE;
                                    }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1956 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_QUIETLY;
                                    }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1965 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", "quietly");

                                        yylval->node = verb;
                                        return token::TOK_QUIETLY;
                                    }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1974 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_NOISILY;
                                    }
	YY_BREAK
/* Non-prefix special commands */
case 186:
YY_RULE_SETUP
#line 1985 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_BY;
                                    }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1994 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_BYSORT;
                                    }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2003 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_XI;
                                    }
	YY_BREAK
/* Commands which have to be lexed and parsed differently because they
                                     * have idiosyncratic syntax */
case 189:
YY_RULE_SETUP
#line 2015 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_MERGE;
                                    }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2024 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_COLLAPSE;
                                    }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2033 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_RECODE;
                                    }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2042 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_IVREGRESS;
                                    }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2051 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_GSORT;
                                    }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2060 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_LRTEST;
                                    }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2069 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_ANOVA;
                                    }
	YY_BREAK
/* all non-keyword identifiers */
case 196:
YY_RULE_SETUP
#line 2082 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_ident"});
                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_IDENT;
                                    }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2090 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        driver.error(*llocp, "Illegal character"); yyterminate();
                                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 2096 "ado.fl"
{ return token::TOK_END; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2098 "ado.fl"
ECHO;
	YY_BREAK
#line 12837 "../lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		if ( *yy_cp )
			{
			yy_current_state = yy_nxt[yy_current_state][YY_SC_TO_UI(*yy_cp)];
			}
		else
			yy_current_state = yy_NUL_trans[yy_current_state];
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	yy_current_state = yy_NUL_trans[yy_current_state];
	yy_is_jam = (yy_current_state == 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yytext_ptr = 0;
    yyg->yy_more_offset = 0;
    yyg->yy_prev_more_offset = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2098 "ado.fl"


void
ado_yy_fatal_error(std::string& msg)
{
    raise_condition(msg, "error");
}

void
ado_yy_fatal_error(const char *msg)
{
    raise_condition(std::string(msg), "error");
}

void
raise_condition(const std::string& msg, const std::string& type)
{
  Rcpp::List cond;
  cond["message"] = msg;
  cond["call"] = R_NilValue;
  cond.attr("class") = Rcpp::CharacterVector::create(type, "condition");
  Rcpp::Function stopper("stop");
  stopper(cond);
}


