#line 2 "../lex.yy.cpp"

#line 4 "../lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, yyg->yytext_ptr, yyleng + 1 , yyscanner); \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 198
#define YY_END_OF_BUFFER 199
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[532] =
    {   0,
        0,    0,    0,    0,   72,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  199,  197,
       78,   76,  149,   96,  180,  197,  197,  140,  159,  160,
      151,  152,  163,  154,  128,  153,  131,  131,  131,  131,
      164,   77,  143,  156,  142,  196,  157,  158,  155,    7,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  161,  141,  162,  150,
       78,  149,   71,  196,  196,   66,   68,   67,   72,   73,
       16,   11,   12,   14,   10,   15,   18,   18,   17,   17,

      198,   25,   27,   24,   23,   19,   26,  153,  196,  196,
      196,  196,  196,   35,  196,   42,   52,   49,   48,   52,
       52,   50,   51,   46,   57,   54,   53,   56,   63,   60,
      198,   62,    6,    3,  198,  112,  101,  100,  198,  111,
       97,   95,   85,  198,  198,   94,   80,   78,  147,  179,
        8,    9,    0,    0,    0,    0,    0,    0,    0,  134,
       64,   70,  173,  130,    0,    0,  131,    0,    0,   77,
      145,  146,  144,  196,    0,    0,   79,  196,    0,  196,
      196,  186,  165,  196,  196,  196,  196,  196,    0,  166,
      196,  196,  136,  137,  196,  196,  196,  196,    0,  196,

      196,    0,  196,  196,  196,  196,  196,  188,    0,  148,
       78,    0,    0,   74,  147,  196,  196,   66,   68,   65,
       72,   16,   13,   17,   25,   20,   21,   22,    0,  196,
      196,  196,  196,   41,  196,   43,   52,   49,   44,   45,
       47,   57,   54,   55,   63,   60,   59,   58,   61,    6,
        3,    4,    0,  112,   98,   99,  110,  102,  104,  103,
      108,  109,  105,  107,  106,   95,   84,   83,   81,   82,
       93,   86,   87,   91,   92,   88,   90,   89,    0,  117,
        0,    0,  116,  118,    0,    0,    0,  132,  132,  130,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  133,

      129,  131,  138,    0,    0,  196,    0,    0,    0,  171,
      167,  196,  196,  182,  196,  196,  196,  196,    0,    0,
      173,  120,  196,  196,  196,  196,  196,    0,    0,  176,
      184,  196,  124,  196,    1,    0,  196,  196,  196,  196,
      196,  196,  196,    5,    2,    0,  118,    0,  134,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      127,    0,  196,    0,    0,    0,    0,  196,  119,  196,
      196,  196,  196,  196,    0,    0,    0,    0,  196,  121,
      196,  196,  196,    0,    0,    0,    0,  196,  196,  125,
      126,  196,    0,  196,   34,  196,  196,  196,  196,  196,

      196,  115,  115,  115,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  195,    0,    0,
        0,    0,  196,  196,  196,  196,  122,  193,    0,    0,
      174,    0,  196,  196,  189,  196,    0,    0,  177,    0,
      196,  196,  135,    0,   34,  196,   33,  196,  196,   36,
      196,  196,  196,  113,    0,  172,    0,    0,    0,  187,
      196,  196,  123,    0,    0,    0,  196,  194,  196,    0,
        0,    0,  196,  191,    0,   33,  196,   32,    0,   75,
      196,   37,  196,  196,  196,    0,    0,    0,    0,    0,
      181,  196,  175,  196,  185,  178,  183,    0,   32,   28,

       31,   39,   40,   38,    0,    0,    0,  168,  169,  190,
      196,   28,   31,   30,    0,    0,  139,  170,  192,   30,
       29,    0,   29,    0,  114,    0,    0,  114,    0,  114,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   25,   24,   26,   24,   27,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   40,   42,   43,   44,   45,   46,
       40,   47,   48,   49,   50,   51,   40,   52,   53,   40,
       54,   55,   56,   57,   40,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   40,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   40,   83,   84,   85,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    4,    1,
        1,    5,    1,    1,    6,    7,    7,    7,    7,    7,
        8,    8,    8,    8,    8,    8,    7,    1,    1,    1,
        1,    9,    9,    9,    9,   10,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    1,   12,    1,    1,   13,    9,    9,
        9,    9,   10,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   14,    1,   15,    1
    } ;

static const flex_int16_t yy_base[592] =
    {   0,
        0,   85,   89,   90, 1576, 1561,   85,   95,  180,    0,
      264,  265,   94,  263,  268,  278,  273,  279,   92,   99,
      105,  112,   91,  268,  114,  302,  356,  363, 1561, 2048,
      120, 2048, 1530, 2048, 1546, 1470,  292, 2048, 2048, 2048,
     2048, 2048, 2048, 2048,  105,   96,  360,  368,  384,  403,
     2048, 1517, 1513, 1494, 1486,    0,  371, 2048, 2048, 1506,
     1427,  427,   99, 1415, 1414, 1385,  497,   38,   69, 1388,
      433, 1223, 1237, 1222, 1222, 1230, 1213, 2048, 2048, 1265,
      336,  106, 2048,   65,   67,    0, 1291, 1273,    0, 2048,
        0, 2048, 2048,    0, 2048, 2048, 2048, 2048,    0,    0,

     2048,    0, 2048, 1209,    0, 2048, 2048, 1271,   66,   66,
      218,  448, 1231, 2048, 1200, 2048,    0, 1268, 2048,  131,
     1251, 2048, 2048,    0,    0, 1254, 2048, 1238,    0, 1241,
     1230, 1234,    0, 1212, 1129,    0, 2048, 2048, 1130,  425,
     2048,    0, 2048, 1182, 1110,  404, 2048,  287, 2048, 2048,
        0, 2048,  469,  482,  505,  513,  521,  516,  530,  549,
     2048, 1172,  577,  594,  625,    0,  583,  257, 1111, 1144,
     2048, 2048, 2048,    0,  619, 1079, 2048, 1086,  558,  650,
     1137,   79, 2048, 1082, 1051, 1041, 1046, 1045,  672, 2048,
      680,  687,    0, 1039,  694, 1039, 1042, 1033,  273, 1034,

     1041,  709,  702, 1025, 1030, 1015, 1022,    0, 1005, 2048,
      590, 1008,  988, 2048,  953,  880,  890,    0,  949, 2048,
        0,    0, 2048,    0,    0,    0, 2048, 2048,  931,  878,
      103,  868,  876,    0,  870,    0,    0,  941,    0,    0,
     2048,    0,  940, 2048,    0,  934,    0, 2048, 2048,    0,
      932, 2048,  849,    0,    0, 2048, 2048, 2048, 2048, 2048,
     2048, 2048, 2048, 2048, 2048,    0,    0, 2048,    0, 2048,
     2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,  715, 2048,
      723,  731, 2048,    0,  745,  756,  930, 2048,  762,  770,
      251,  112,  267,  602,  274,  280,  310,  311,  779,  792,

        0,  805, 2048,  850,  861,  844,  813,  233,  863, 2048,
     2048,  849,  847,  806,  813,  821,  821,  804,  827,  840,
     2048,    0,  814,  805,  804,  794,  782,  850,  864, 2048,
      794,  784,  870,  776, 2048,  771,  336,  775,  783,  783,
      771,  754,  753, 2048, 2048,  876,    0,  882,  892, 2048,
      341,  398,  450,  453,  443,  867,  872,  366,  388,  442,
     2048,  753,  760,  906,  736,  747,  733,  733,    0,  719,
      731,  707,  698,  696,  937,  944,  745,  950,  698,    0,
      685,  697,  692,  972,  979,  732,  957,  666,  667,  964,
        0,  657,  454,  632,  631,  620,  629,  618,  618,  617,

      615, 2048,  620,  618,  985,  991,  997, 1003, 1009, 1015,
     1021, 1027, 1033, 1039, 1045, 1051,  603,    0,  648,  587,
      586,  582,  578,  570,  571,  577,    0,    0,  462, 1073,
     2048, 1079,  561,  556,    0,  563,  544, 1101, 2048, 1107,
      559,  562,    0,  555,  552,  549,  524, 1133,  522,    0,
      512,  511,  508, 1152,  517, 2048,  503,  565,  553,    0,
      502,  486,    0, 1160,  363,  540,  485,    0,  459, 1174,
      428,  506,  417,    0,  436,  411,  412,  399,  473, 2048,
     1219,    0,  366,  342,  325, 1238,  324,  384,  378,  361,
        0,  304, 2048,  272,    0, 2048,    0,  246,  229,    0,

      241,    0,    0,    0, 1145, 1077,  283, 2048, 2048,    0,
      202, 2048,  116,   86,  130, 1081, 2048, 2048,    0,   69,
        0, 1180, 2048, 1186,  112, 1230, 1244,  101, 1257, 1263,
     2048, 1305, 1320, 1335, 1350, 1365, 1380, 1395, 1410, 1425,
     1440, 1448, 1455, 1466, 1481, 1496, 1511, 1522, 1530, 1541,
     1548, 1562, 1577, 1590, 1605, 1620, 1635, 1649, 1664, 1672,
     1686, 1701, 1716, 1724, 1738, 1746, 1757, 1765, 1775, 1790,
     1805, 1820, 1824, 1835, 1842, 1853, 1866, 1881, 1896, 1911,
     1925, 1940, 1948, 1959, 1974, 1982, 1987, 1999, 2007, 2017,
     2032

    } ;

static const flex_int16_t yy_def[592] =
    {   0,
      531,    1,  532,  532,  533,  533,  534,  534,  531,    9,
      535,  535,    1,    1,    1,    1,  536,  536,  537,  537,
      538,  538,  539,  539,  540,  540,  541,  541,  531,  531,
      531,  531,  531,  531,  531,  542,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  543,  531,  531,  531,  531,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  531,  531,  531,  531,
      531,  544,  531,  543,  543,  545,  531,  531,  546,  531,
      547,  531,  531,  548,  531,  531,  531,  531,  549,  549,

      531,  550,  531,  551,  552,  531,  531,  531,  543,  543,
      543,  543,  543,  531,  543,  531,  553,  531,  531,  553,
      553,  531,  531,  553,  554,  531,  531,  531,  555,  531,
      556,  531,  557,  531,  558,  559,  531,  531,  560,  561,
      531,  562,  531,  563,  564,  565,  531,  531,  531,  531,
      566,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  567,  531,  531,  568,  164,  531,  531,  531,
      531,  531,  531,  543,  531,  531,  531,  543,  531,  543,
      543,  543,  531,  543,  543,  543,  543,  543,  531,  531,
      543,  543,  543,  543,  543,  543,  543,  543,  531,  543,

      543,  531,  543,  543,  543,  543,  543,  543,  531,  531,
      531,  531,  569,  531,  569,  543,  543,  570,  531,  531,
      571,  572,  531,  573,  574,  575,  531,  531,  531,  543,
      543,  543,  543,  543,  543,  543,  576,  531,  576,  576,
      531,  577,  531,  531,  578,  531,  579,  531,  531,  580,
      531,  531,  581,  582,  583,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  584,  585,  531,  586,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  587,  531,  531,  531,  531,  588,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      589,  531,  531,  531,  531,  543,  531,  531,  531,  531,
      531,  543,  543,  543,  543,  543,  543,  543,  531,  531,
      531,  543,  543,  543,  543,  543,  543,  531,  531,  531,
      543,  543,  543,  543,  531,  531,  543,  543,  543,  543,
      543,  543,  543,  531,  531,  531,  587,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  543,  531,  531,  531,  531,  543,  543,  543,
      543,  543,  543,  543,  531,  531,  531,  531,  543,  543,
      543,  543,  543,  531,  531,  531,  531,  543,  543,  543,
      543,  543,  531,  543,  543,  543,  543,  543,  543,  543,

      543,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  543,  531,  531,
      531,  531,  543,  543,  543,  543,  543,  543,  531,  531,
      531,  531,  543,  543,  543,  543,  531,  531,  531,  531,
      543,  543,  543,  531,  531,  543,  543,  590,  543,  543,
      543,  543,  543,  531,  531,  531,  531,  531,  531,  543,
      543,  543,  543,  531,  531,  531,  543,  543,  543,  531,
      531,  531,  543,  543,  531,  531,  543,  543,  591,  531,
      590,  543,  543,  543,  543,  531,  531,  531,  531,  531,
      543,  543,  531,  543,  543,  531,  543,  531,  531,  543,

      543,  543,  543,  543,  531,  531,  531,  531,  531,  543,
      543,  531,  531,  543,  531,  531,  531,  531,  543,  531,
      543,  531,  531,  531,  531,  531,  531,  531,  531,  531,
        0,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531

    } ;

static const flex_int16_t yy_nxt[2135] =
    {   0,
       30,   31,   32,   31,   31,   33,   34,   35,   36,   37,
       38,   30,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   50,   50,   51,   52,   53,   54,
       55,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   30,   58,   59,   60,   61,   62,
       63,   64,   56,   65,   66,   56,   67,   56,   68,   69,
       70,   71,   56,   72,   73,   74,   56,   75,   56,   56,
       76,   56,   77,   78,   79,   80,   81,   92,   81,   81,
       82,   87,   87,  134,  126,  199,   93,   92,  127,   83,

       30,  126,   30,   88,   88,  127,   93,  130,  214,  197,
      161,  131,  198,  108,  130,  162,  137,  183,  131,  529,
      138,  148,  139,  148,  148,  160,  160,  160,  160,  160,
      160,  200,  217,  187,  230,  215,  216,  231,  526,   94,
      198,  188,   95,  206,  523,  239,  128,  353,   84,   94,
      240,   30,   95,  128,  312,  313,  522,  184,  109,  132,
       85,  521,  110,  340,  111,  112,  132,   96,  140,   96,
      185,  141,  113,  324,  353,  135,  114,   96,  520,   96,
       97,   97,   98,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       99,   99,   99,   99,   99,   99,   97,   97,   97,   97,
       97,   99,   99,   99,  100,   99,   99,   99,   99,   99,
       99,  100,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   97,   97,   97,   97,   97,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  101,   97,  101,   97,  103,  103,   82,   30,
      134,   30,  104,  104,   30,  118,   30,  519,  303,  119,
      232,  118,  108,   82,   30,  119,   30,  108,  148,  201,
      148,  148,  120,  124,  303,  233,  351,  108,  120,  365,

      352,  518,  354,  514,  137,  357,  513,  366,  138,  153,
      139,  512,  154,  155,  156,  154,  154,  157,  105,  105,
       30,  106,  106,  351,  358,   30,  303,  109,  352,  354,
      121,  110,  357,  111,  112,   30,  121,  211,   85,  211,
      211,  113,  303,  359,  115,  114,  360,  511,  107,  107,
      116,  358,  135,   85,  115,  122,  140,  123,  143,  141,
      116,  122,  144,  123,  145,  143,  510,  465,  158,  144,
      359,  145,  175,  360,  175,  175,  466,  159,  163,  509,
      164,  164,  164,  164,  164,  164,  163,  405,  167,  167,
      167,  167,  167,  167,  168,  165,  508,  507,  394,  212,

      506,  504,  163,  165,  167,  167,  167,  167,  167,  167,
      146,  166,  272,  147,  395,  405,  414,  146,  503,  165,
      147,  163,  165,  167,  167,  167,  167,  167,  167,  176,
      165,  258,  471,  259,  176,  406,  415,  176,  165,  179,
      166,  472,  502,  176,  414,  202,  165,  180,  180,  180,
      180,  180,  180,  203,  203,  203,  203,  203,  203,  169,
      202,  273,  406,  274,  415,  165,  429,  275,  203,  203,
      203,  203,  203,  203,  276,  480,  501,  500,  277,  499,
      278,  378,  260,  407,  261,  408,  409,  416,  262,  154,
      154,  154,  154,  154,  154,  263,  498,  181,  497,  264,

      279,  265,  154,  154,  154,  154,  154,  154,  182,  189,
      407,  234,  408,  409,  416,  190,  444,  191,  191,  191,
      191,  191,  191,  279,  496,  154,  154,  154,  154,  281,
      154,  279,  445,  154,  282,  154,  154,  154,  154,  279,
      495,  154,  154,  154,  154,  154,  154,  494,  437,  284,
      285,  285,  285,  285,  285,  285,  192,  280,  493,  283,
      193,  492,  283,  387,  491,  307,  490,  194,  195,  160,
      160,  160,  160,  160,  160,  196,  284,  284,  489,  488,
      280,  284,  487,  485,  286,  284,  484,  483,  280,  284,
      482,  211,  478,  211,  211,  284,  280,  289,  289,  289,

      289,  289,  289,  302,  302,  302,  302,  302,  302,  477,
      476,  286,  163,  475,  290,  290,  290,  290,  290,  290,
      175,  308,  175,  175,  474,  291,  309,  473,  292,  165,
      293,  469,  468,  355,  294,  467,  295,  296,  297,  463,
      299,  298,  299,  462,  461,  300,  300,  300,  300,  300,
      300,  356,  291,  212,  460,  292,  165,  293,  459,  458,
      355,  294,  457,  295,  296,  297,  456,  455,  310,  298,
      180,  180,  180,  180,  180,  180,  319,  176,  402,  356,
      402,  453,  176,  452,  451,  176,  450,  449,  448,  447,
      446,  176,  320,  320,  320,  320,  320,  320,  321,  179,

      191,  191,  191,  191,  191,  191,  202,  180,  180,  180,
      180,  180,  180,  328,  203,  203,  203,  203,  203,  203,
      330,  443,  203,  203,  203,  203,  203,  203,  442,  329,
      329,  329,  329,  329,  329,  346,  346,  346,  346,  346,
      346,  279,  441,  154,  154,  154,  154,  154,  154,  279,
      439,  154,  154,  154,  154,  154,  154,  181,  436,  435,
      434,  283,  433,  431,  283,  285,  285,  285,  285,  285,
      285,  348,  428,  348,  427,  426,  349,  349,  349,  349,
      349,  349,  289,  289,  289,  289,  289,  289,  163,  425,
      290,  290,  290,  290,  290,  290,  424,  286,  280,  300,

      300,  300,  300,  300,  300,  165,  280,  423,  422,  421,
      420,  283,  300,  300,  300,  300,  300,  300,  418,  417,
      280,  401,  400,  163,  286,  302,  302,  302,  302,  302,
      302,  319,  165,  364,  364,  364,  364,  364,  364,  399,
      165,  398,  397,  396,  376,  393,  392,  375,  375,  375,
      375,  375,  375,  377,  328,  389,  388,  383,  382,  378,
      320,  320,  320,  320,  320,  320,  381,  165,  385,  380,
      384,  384,  384,  384,  384,  384,  379,  386,  374,  373,
      372,  371,  370,  387,  329,  329,  329,  329,  329,  329,
      390,  390,  390,  390,  390,  390,  346,  346,  346,  346,

      346,  346,  349,  349,  349,  349,  349,  349,  410,  369,
      411,  391,  349,  349,  349,  349,  349,  349,  412,  419,
      368,  367,  363,  362,  413,  361,  364,  364,  364,  364,
      364,  364,  350,  345,  251,  410,  246,  411,  402,  403,
      404,  429,  243,  238,  343,  342,  412,  341,  376,  339,
      287,  219,  338,  413,  337,  214,  378,  375,  375,  375,
      375,  375,  375,  378,  430,  430,  430,  430,  430,  430,
      432,  432,  432,  432,  432,  432,  437,  440,  440,  440,
      440,  440,  440,  385,  390,  390,  390,  390,  390,  390,
      214,  387,  384,  384,  384,  384,  384,  384,  387,  438,

      438,  438,  438,  438,  438,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  464,  516,  336,
      516,  516,  516,  465,  516,  516,  377,  335,  334,  333,
      332,  331,  466,  430,  430,  430,  430,  430,  430,  432,

      432,  432,  432,  432,  432,  470,  517,  327,  326,  325,
      517,  471,  324,  323,  386,  322,  318,  317,  316,  315,
      472,  438,  438,  438,  438,  438,  438,  440,  440,  440,
      440,  440,  440,  479,  479,  480,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  486,  314,  311,  486,  306,  305,  479,
      479,  479,  479,  479,  464,  515,  515,  515,  515,  515,
      515,  170,  454,  454,  454,  454,  454,  454,  470,  304,
      430,  430,  430,  430,  430,  430,  479,  479,  479,  479,
      479,  287,  270,  268,  438,  438,  438,  438,  438,  438,

      524,  524,  524,  524,  524,  524,  525,  525,  525,  525,
      525,  525,  256,  253,  251,  479,  479,  479,  479,  479,
      479,  480,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  486,
      249,  248,  486,  246,  244,  479,  479,  479,  479,  479,
      527,  527,  527,  527,  527,  527,  243,  241,  505,  505,
      505,  505,  505,  505,  528,  528,  528,  528,  528,  528,
      238,  236,  479,  479,  479,  479,  479,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  235,
      229,  227,  220,  219,  210,  209,  208,  207,  206,  205,

      204,  479,  479,  479,  479,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  151,  151,  151,  151,  201,
      188,  151,  174,  174,  174,  174,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  218,  187,  218,  218,  218,  186,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  221,  178,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  222,  177,  222,  222,  173,  222,  222,  222,  222,
      222,  222,  223,  172,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  224,  224,  224,
      224,  225,  171,  225,  170,  225,  225,  225,  225,  225,
      225,  225,  152,  150,  225,  226,  226,  226,  226,  149,
      531,  226,  228,   90,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  237,   90,  531,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      242,  531,  531,  242,  242,  242,  242,  242,  242,  242,

      242,  531,  242,  242,  242,  245,  531,  531,  245,  245,
      245,  245,  245,  245,  245,  245,  531,  245,  245,  245,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  250,  531,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  254,  531,  531,  531,  254,  254,
      254,  254,  254,  254,  254,  531,  531,  254,  254,  255,
      255,  255,  255,  531,  531,  255,  257,  531,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  266,  531,  531,  531,  266,  266,  266,  266,  266,
      266,  266,  531,  531,  266,  266,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  269,  269,  269,  269,  531,  531,  269,  271,  531,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  151,  151,  151,  151,  288,  288,  288,
      288,  288,  288,  288,  288,  531,  531,  531,  288,  288,
      288,  288,  301,  301,  301,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      218,  531,  218,  218,  218,  531,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  221,  531,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      222,  531,  222,  222,  531,  222,  222,  222,  222,  222,
      222,  224,  224,  224,  224,  225,  531,  225,  531,  225,
      225,  225,  225,  225,  225,  225,  531,  531,  225,  226,
      226,  226,  226,  237,  531,  531,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  242,  531,  531,  242,
      242,  242,  242,  242,  242,  242,  242,  531,  242,  242,
      242,  245,  531,  531,  245,  245,  245,  245,  245,  245,
      245,  245,  531,  245,  245,  245,  247,  247,  247,  247,

      531,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  250,  531,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      254,  531,  531,  531,  254,  254,  254,  254,  254,  254,
      254,  531,  531,  254,  254,  255,  255,  255,  255,  266,
      531,  531,  531,  266,  266,  266,  266,  266,  266,  266,
      531,  531,  266,  266,  267,  267,  267,  267,  531,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  269,
      269,  269,  269,  347,  531,  347,  347,  347,  347,  288,

      288,  288,  288,  288,  288,  288,  288,  531,  288,  531,
      288,  288,  288,  288,  301,  301,  301,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,   29,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531
    } ;

static const flex_int16_t yy_chk[2135] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    7,    2,    2,
        2,    3,    4,   23,   19,   69,    7,    8,   19,    2,

       13,   20,   13,    3,    4,   20,    8,   21,   82,   68,
       46,   21,   68,   13,   22,   46,   25,   63,   22,  528,
       25,   31,   25,   31,   31,   45,   45,   45,   45,   45,
       45,   69,   85,   84,  109,   82,   84,  110,  525,    7,
      110,  109,    7,   85,  520,  120,   19,  292,    2,    8,
      120,   13,    8,   20,  182,  182,  515,   63,   13,   21,
        2,  514,   13,  231,   13,   13,   22,    7,   25,    7,
       63,   25,   13,  231,  292,   23,   13,    8,  513,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   11,   12,   14,   14,
       24,   14,   11,   12,   15,   17,   15,  511,  168,   17,
      111,   18,   14,   16,   16,   18,   16,   15,  148,  111,
      148,  148,   17,   18,  199,  111,  291,   16,   18,  308,

      291,  507,  293,  501,   26,  295,  499,  308,   26,   37,
       26,  498,   37,   37,   37,   37,   37,   37,   11,   12,
       14,   11,   12,  291,  296,   15,  168,   14,  291,  293,
       17,   14,  295,   14,   14,   16,   18,   81,   14,   81,
       81,   14,  199,  297,   15,   14,  298,  494,   11,   12,
       15,  296,   24,   16,   16,   17,   26,   17,   27,   26,
       16,   18,   27,   18,   27,   28,  492,  465,   37,   28,
      297,   28,   57,  298,   57,   57,  465,   37,   47,  490,
       47,   47,   47,   47,   47,   47,   48,  351,   48,   48,
       48,   48,   48,   48,   48,   47,  489,  488,  337,   81,

      487,  485,   49,   48,   49,   49,   49,   49,   49,   49,
       27,   47,  146,   27,  337,  351,  358,   28,  484,   49,
       28,   50,   47,   50,   50,   50,   50,   50,   50,   57,
       48,  140,  471,  140,   57,  352,  359,   57,   50,   62,
       47,  471,  483,   57,  358,   71,   49,   62,   62,   62,
       62,   62,   62,   71,   71,   71,   71,   71,   71,   49,
      112,  146,  352,  146,  359,   50,  429,  146,  112,  112,
      112,  112,  112,  112,  146,  479,  478,  477,  146,  476,
      146,  429,  140,  353,  140,  354,  355,  360,  140,  153,
      153,  153,  153,  153,  153,  140,  475,   62,  473,  140,

      154,  140,  154,  154,  154,  154,  154,  154,   62,   67,
      353,  112,  354,  355,  360,   67,  393,   67,   67,   67,
       67,   67,   67,  155,  472,  155,  155,  155,  155,  155,
      155,  156,  393,  156,  156,  156,  156,  156,  156,  157,
      469,  157,  157,  157,  157,  157,  157,  467,  437,  158,
      159,  159,  159,  159,  159,  159,   67,  154,  466,  157,
       67,  462,  157,  437,  461,  179,  459,   67,   67,  160,
      160,  160,  160,  160,  160,   67,  158,  158,  458,  457,
      155,  158,  455,  453,  160,  158,  452,  451,  156,  158,
      449,  211,  447,  211,  211,  158,  157,  163,  163,  163,

      163,  163,  163,  167,  167,  167,  167,  167,  167,  446,
      445,  160,  164,  444,  164,  164,  164,  164,  164,  164,
      175,  179,  175,  175,  442,  164,  179,  441,  164,  164,
      164,  436,  434,  294,  164,  433,  164,  164,  164,  426,
      165,  164,  165,  425,  424,  165,  165,  165,  165,  165,
      165,  294,  164,  211,  423,  164,  164,  164,  422,  421,
      294,  164,  420,  164,  164,  164,  419,  417,  180,  164,
      180,  180,  180,  180,  180,  180,  189,  175,  404,  294,
      403,  401,  175,  400,  399,  175,  398,  397,  396,  395,
      394,  175,  189,  189,  189,  189,  189,  189,  191,  192,

      191,  191,  191,  191,  191,  191,  195,  192,  192,  192,
      192,  192,  192,  202,  195,  195,  195,  195,  195,  195,
      203,  392,  203,  203,  203,  203,  203,  203,  389,  202,
      202,  202,  202,  202,  202,  279,  279,  279,  279,  279,
      279,  281,  388,  281,  281,  281,  281,  281,  281,  282,
      386,  282,  282,  282,  282,  282,  282,  192,  383,  382,
      381,  281,  379,  377,  281,  285,  285,  285,  285,  285,
      285,  286,  374,  286,  373,  372,  286,  286,  286,  286,
      286,  286,  289,  289,  289,  289,  289,  289,  290,  371,
      290,  290,  290,  290,  290,  290,  370,  289,  281,  299,

      299,  299,  299,  299,  299,  290,  282,  368,  367,  366,
      365,  282,  300,  300,  300,  300,  300,  300,  363,  362,
      285,  343,  342,  302,  289,  302,  302,  302,  302,  302,
      302,  319,  290,  307,  307,  307,  307,  307,  307,  341,
      302,  340,  339,  338,  320,  336,  334,  319,  319,  319,
      319,  319,  319,  320,  328,  332,  331,  327,  326,  320,
      320,  320,  320,  320,  320,  320,  325,  302,  329,  324,
      328,  328,  328,  328,  328,  328,  323,  329,  318,  317,
      316,  315,  314,  329,  329,  329,  329,  329,  329,  329,
      333,  333,  333,  333,  333,  333,  346,  346,  346,  346,

      346,  346,  348,  348,  348,  348,  348,  348,  356,  313,
      356,  333,  349,  349,  349,  349,  349,  349,  357,  364,
      312,  309,  306,  305,  357,  304,  364,  364,  364,  364,
      364,  364,  287,  253,  251,  356,  246,  356,  346,  346,
      346,  375,  243,  238,  235,  233,  357,  232,  376,  230,
      229,  219,  217,  357,  216,  215,  375,  375,  375,  375,
      375,  375,  375,  376,  376,  376,  376,  376,  376,  376,
      378,  378,  378,  378,  378,  378,  384,  387,  387,  387,
      387,  387,  387,  385,  390,  390,  390,  390,  390,  390,
      213,  384,  384,  384,  384,  384,  384,  384,  385,  385,

      385,  385,  385,  385,  385,  405,  405,  405,  405,  405,
      405,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  410,  410,  410,  410,  410,
      410,  411,  411,  411,  411,  411,  411,  412,  412,  412,
      412,  412,  412,  413,  413,  413,  413,  413,  413,  414,
      414,  414,  414,  414,  414,  415,  415,  415,  415,  415,
      415,  416,  416,  416,  416,  416,  416,  430,  506,  212,
      506,  506,  516,  432,  516,  516,  430,  209,  207,  206,
      205,  204,  432,  430,  430,  430,  430,  430,  430,  432,

      432,  432,  432,  432,  432,  438,  506,  201,  200,  198,
      516,  440,  197,  196,  438,  194,  188,  187,  186,  185,
      440,  438,  438,  438,  438,  438,  438,  440,  440,  440,
      440,  440,  440,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  454,  184,  181,  454,  178,  176,  448,
      448,  448,  448,  448,  464,  505,  505,  505,  505,  505,
      505,  170,  454,  454,  454,  454,  454,  454,  470,  169,
      464,  464,  464,  464,  464,  464,  448,  448,  448,  448,
      448,  162,  145,  144,  470,  470,  470,  470,  470,  470,

      522,  522,  522,  522,  522,  522,  524,  524,  524,  524,
      524,  524,  139,  135,  134,  448,  448,  448,  448,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  486,
      132,  131,  486,  130,  128,  481,  481,  481,  481,  481,
      526,  526,  526,  526,  526,  526,  126,  121,  486,  486,
      486,  486,  486,  486,  527,  527,  527,  527,  527,  527,
      118,  115,  481,  481,  481,  481,  481,  529,  529,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  530,  113,
      108,  104,   88,   87,   80,   77,   76,   75,   74,   73,

       72,  481,  481,  481,  481,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  542,  542,  542,  542,   70,
       66,  542,  543,  543,  543,  543,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  545,   65,  545,  545,  545,   64,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  546,   61,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  547,   60,  547,  547,   55,  547,  547,  547,  547,
      547,  547,  548,   54,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  550,   53,  550,   52,  550,  550,  550,  550,  550,
      550,  550,   36,   35,  550,  551,  551,  551,  551,   33,
       29,  551,  552,    6,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  553,    5,    0,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      554,    0,    0,  554,  554,  554,  554,  554,  554,  554,

      554,    0,  554,  554,  554,  555,    0,    0,  555,  555,
      555,  555,  555,  555,  555,  555,    0,  555,  555,  555,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  557,    0,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  559,    0,    0,    0,  559,  559,
      559,  559,  559,  559,  559,    0,    0,  559,  559,  560,
      560,  560,  560,    0,    0,  560,  561,    0,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,

      561,  562,    0,    0,    0,  562,  562,  562,  562,  562,
      562,  562,    0,    0,  562,  562,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  564,  564,  564,  564,    0,    0,  564,  565,    0,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  566,  566,  566,  566,  567,  567,  567,
      567,  567,  567,  567,  567,    0,    0,    0,  567,  567,
      567,  567,  568,  568,  568,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      570,    0,  570,  570,  570,    0,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  571,    0,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      572,    0,  572,  572,    0,  572,  572,  572,  572,  572,
      572,  573,  573,  573,  573,  574,    0,  574,    0,  574,
      574,  574,  574,  574,  574,  574,    0,    0,  574,  575,
      575,  575,  575,  576,    0,    0,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  577,    0,    0,  577,
      577,  577,  577,  577,  577,  577,  577,    0,  577,  577,
      577,  578,    0,    0,  578,  578,  578,  578,  578,  578,
      578,  578,    0,  578,  578,  578,  579,  579,  579,  579,

        0,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  580,    0,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      582,    0,    0,    0,  582,  582,  582,  582,  582,  582,
      582,    0,    0,  582,  582,  583,  583,  583,  583,  584,
        0,    0,    0,  584,  584,  584,  584,  584,  584,  584,
        0,    0,  584,  584,  585,  585,  585,  585,    0,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  586,
      586,  586,  586,  587,    0,  587,  587,  587,  587,  588,

      588,  588,  588,  588,  588,  588,  588,    0,  588,    0,
      588,  588,  588,  588,  589,  589,  589,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

#line 1 "ado.fl"
#line 6 "ado.fl"
#include <algorithm>
#include <stack>
#include <vector>
#include <sstream>
#include <string>

#include <Rcpp.h>

#include "Ado.hpp"
#include "ado.tab.hpp"

#ifndef YYSTYPE
#define YYSTYPE yy::AdoParser::semantic_type
#endif

// We really, really can't have the scanner calling exit() and
// killing the R process, so let's use our own friendlier routine.
// If the issue is memory exhaustion, the R interpreter overall will
// have run out of memory and will handle it however it's going to.
#ifdef YY_FATAL_ERROR
#undef YY_FATAL_ERROR
#endif

#define YY_FATAL_ERROR(msg) ado_yy_fatal_error(msg)

// Make yytext big enough to hold a macro replacement text as large as
// the ones Stata allows
#ifdef YYLMAX
#undef YYLMAX
#endif

#define YYLMAX 65536

// our error handling routine for fatal errors, defined below
void ado_yy_fatal_error(const char *msg);

// String utilities only used here
std::vector<std::string> split(const std::string &s, char delim);
std::vector<std::string> &split(const std::string &s, char delim,
                                std::vector<std::string> &elems);
std::string trim(const std::string& str, const std::string& what = " ");

typedef yy::AdoParser::token token;

// How to get macro expansions from R
#define R_MACRO_VALUE(name) driver.get_macro_value(name);

// How to report errors to R for further processing
#define R_ERROR(val) driver.error(llocp->begin.line, llocp->begin.column, val);

// Should we echo the matched text? It's necessary for
// logging and for printing commands run in do-files.
#define R_ECHO(val) { \
                        std::string tmp = std::string(val); \
                        \
                        if(tmp.length() >= macro_length) \
                        { \
                            tmp = tmp.erase(0, macro_length); \
                            macro_length = 0; \
                            driver.push_echo_text(tmp); \
                        } else \
                        { \
                            macro_length -= tmp.length(); \
                        } \
                        \
                    }

// Code run each time a pattern is matched
#define YY_USER_ACTION  { llocp->columns(yyleng); }
#line 1173 "../lex.yy.cpp"

#line 1175 "../lex.yy.cpp"

#define INITIAL 0
#define LONG_COMMENT 1
#define SHORT_COMMENT 2
#define LOCAL_MACRO 3
#define GMACRO_ALPHA 4
#define GMACRO_BRACE 5
#define FOREACH 6
#define FORVALUES 7
#define ACCUMULATE 8
#define STRING_ACCUMULATE 9
#define CDQUOTE_ACCUMULATE 10
#define EMBED 11
#define STRING 12
#define CDQUOTE 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char yytext_r[YYLMAX];
    char *yytext_ptr;
    int yy_more_offset;
    int yy_prev_more_offset;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 107 "ado.fl"



#line 111 "ado.fl"
// Code run each time yylex is called
llocp->step();

// Buffers and stacks for state machines
std::string embed_buf;
std::string cdquote_buf;
std::string string_buf;

// Loop objects
std::string loop_buf;
int brace_count = 0;

std::stack<std::vector<std::string>> macro_stack;

// We don't want to echo text resulting from macro expansions, so
// let's keep track of how much of it there is so the R_ECHO macro can
// avoid outputting it.
size_t macro_length = 0;

                                    /* if you write {{{ ... }}}, the ... will be executed as R code */
#line 1497 "../lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 532 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 531 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 131 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        embed_buf.clear();
                                        yy_push_state(EMBED, yyscanner);
                                    }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 138 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_pop_state(yyscanner);

                                        ExprNode *node = new ExprNode("ado_embedded_code");
                                        node->addData("value", std::string(embed_buf));
                                        node->addData("lang", "R");

                                        yylval->node = node;
                                        return token::TOK_EMBEDDED_CODE;
                                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 151 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng);
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 157 "ado.fl"
{ 
                                        R_ECHO(yytext);
                                        
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 162 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 167 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        embed_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(EMBED):
#line 173 "ado.fl"
{
                                        embed_buf.clear();
                                        yy_pop_state(yyscanner);
                                        
                                        R_ERROR("Unclosed embed block");
                                        yyterminate();
                                    }
	YY_BREAK

/* INITIAL rules to match macros, local and global */
case 7:
YY_RULE_SETUP
#line 185 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 197 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 209 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
/* Rules for while within optionally nested local macros */

case 10:
YY_RULE_SETUP
#line 226 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
/* Local macros can't include newlines */
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 237 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(1);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed local macro");
                                        yyterminate();
                                    }
	YY_BREAK
/* We've reached the matching close quote - let's expand the macro */
case 12:
YY_RULE_SETUP
#line 254 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;
                                        
                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        combined = std::string("_") + combined; // local macros start with a "_"
                                        
                                        replacement = R_MACRO_VALUE(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);

                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 288 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext + 1)); // a string w/o the first char
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 298 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string("\\"));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 308 "ado.fl"
{
                                        // These macros can't contain braces because the braces might
                                        // not be balanced, which would greatly complicate parsing loops
                                        R_ECHO(yytext);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Invalid character in local macro");
                                        yyterminate();
                                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 323 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* This is an error (failing to close the macro) */
case YY_STATE_EOF(LOCAL_MACRO):
#line 335 "ado.fl"
{
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed local macro");
                                        yyterminate();
                                    }
	YY_BREAK

/* Rules for global macros of the form \$[:alnum:]+
                                     * This is a bit overcomplicated for just these macros, honestly, but
                                     * it uses the same state machine setup as for the more complicated
                                     * GMACRO_BRACE and LOCAL_MACRO cases, and lets us just push a GMACRO_ALPHA
                                     * state within either of those instead of duplicating this code. */

/* A global macro name that doesn't need to be disambiguated with braces */
case 17:
YY_RULE_SETUP
#line 355 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* Any other character is a delimiter - we're at the end of the macro */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 367 "ado.fl"
{
                                        // don't R_ECHO because we're unputting the matched text to process again

                                        if(yytext[0] == '\n')
                                            llocp->lines(1);
                                        
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;

                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        
                                        replacement = R_MACRO_VALUE(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            unput(yytext[0]); // we never saw this character
                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            unput(yytext[0]); // we never saw this character
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);
                                            
                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK
/* EOF is also a delimiter, but flex won't allow it in a normal rule */
case YY_STATE_EOF(GMACRO_ALPHA):
#line 406 "ado.fl"
{
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;

                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        
                                        replacement = R_MACRO_VALUE(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);
                                            
                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK

/* The style of global macro with matching braces to allow other macros
                                     * to be expanded and incorporated into a global's name. */

/* Allow any type of macro to be nested here */
case 19:
YY_RULE_SETUP
#line 444 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 20:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 453 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 462 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 471 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext + 1)); // a string w/o the first char
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 481 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string("\\"));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 492 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* Characters that should be part of the name */
case 25:
YY_RULE_SETUP
#line 504 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // push yytext to the back of the current frame
                                        std::vector<std::string> frame = macro_stack.top();
                                        macro_stack.pop();

                                        frame.push_back(std::string(yytext));
                                        macro_stack.push(frame);
                                    }
	YY_BREAK
/* We've seen the closing brace - wrap up and expand this macro */
case 26:
YY_RULE_SETUP
#line 516 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::vector<std::string> frame = macro_stack.top();
                                        std::string combined, replacement;

                                        macro_stack.pop();
                                        
                                        for(size_t i = 0; i < frame.size(); i++)
                                            combined += frame[i];
                                        
                                        replacement = R_MACRO_VALUE(combined);

                                        if(!macro_stack.empty())
                                        {
                                            std::vector<std::string> prev = macro_stack.top();
                                            macro_stack.pop();

                                            prev.push_back(replacement);
                                            macro_stack.push(prev);
                                            
                                            yy_pop_state(yyscanner);
                                        } else
                                        {
                                            for(size_t i = replacement.length(); i > 0; i--)
                                                unput(replacement[i - 1]);
                                            
                                            macro_length += replacement.length();
                                            
                                            yy_pop_state(yyscanner);
                                        }
                                    }
	YY_BREAK
/* newline here is an error - these macros can't cross lines */
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 550 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(1);
                                        
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed brace-delimited global macro");
                                        yyterminate();
                                    }
	YY_BREAK
/* EOF here is an error - the user forgot the closing "}" */
case YY_STATE_EOF(GMACRO_BRACE):
#line 567 "ado.fl"
{
                                        while(!macro_stack.empty())
                                            macro_stack.pop();
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed brace-delimited global macro");
                                        yyterminate();
                                    }
	YY_BREAK

/* Loops, which in Stata are not loops in the usual sense.
                                     * A Stata loop is a directive to the macro processor (this
                                     * scanner, in this case) to bind a macro name over a set of
                                     * values and for each such value, reparse and execute a block
                                     * of text containing the macro.
                                     
                                     * The basic idea here is this: once we see one of the looping
                                     * keywords foreach or forvalues, specially lex a) the macro name,
                                     * b) the set of values it should range over, c) the block of text
                                     * and pass those things as appropriate tokens to the parser. The parser
                                     * forms the appropriate productions from them, and their associated
                                     * ExprNode objects will be passed up to the R layer for execution. The
                                     * functions that implement them set up the macro context, and for each
                                     * value of the macro, invoke a new parser/scanner instance to reparse
                                     * and execute the text block. If there are nested loops, there can be
                                     * three or more scanners running at once, in interleaved timeslices.
                                     * (That's why it's so important that both the parser and the scanner be
                                     * reentrant, even though R isn't multithreaded.) */
case 28:
YY_RULE_SETUP
#line 599 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FOREACH, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_foreach"});
                                        return token::TOK_FOREACH;
                                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 608 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 617 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 626 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 635 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 644 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 653 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(FORVALUES, yyscanner);

                                        yylval->node = new ExprNode({"ado_loop", "ado_forvalues"});
                                        return token::TOK_FORVALUES;
                                    }
	YY_BREAK

case 35:
YY_RULE_SETUP
#line 666 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        loop_buf.clear();
                                        yy_push_state(ACCUMULATE, yyscanner);

                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACE;
                                    }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 675 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_LOCAL;
                                    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 679 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_GLOBAL;
                                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 683 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_VARLIST;
                                    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 687 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_NEWLIST;
                                    }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 691 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_NUMLIST;
                                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 695 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_OF;
                                    }
	YY_BREAK
case YY_STATE_EOF(FOREACH):
#line 699 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Foreach loop without a statement body");
                                        yyterminate();
                                    }
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 713 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf.clear();
                                        yy_push_state(ACCUMULATE, yyscanner);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACE;
                                    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 722 "ado.fl"
{
                                        R_ECHO(yytext);
                                        return token::TOK_TO;
                                    }
	YY_BREAK
case YY_STATE_EOF(FORVALUES):
#line 726 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Foreach loop without a statement body");
                                        yyterminate();
                                    }
	YY_BREAK


/* We never need to execute comments, and they can contain unmatched braces,
                                     * so just eat them now, exactly as usual */
case 44:
YY_RULE_SETUP
#line 742 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yy_push_state(LONG_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 746 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 750 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 755 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf.clear();
                                        yy_push_state(CDQUOTE_ACCUMULATE, yyscanner);
                                    }
	YY_BREAK
/* Strings may contain unbalanced braces, so we need some subsidiary states
                                     * to handle them without confusing the brace counting code. We can't use the
                                     * usual string states because a) they don't append to loop_buf, but more
                                     * fundamentally because b) they'll process backslash escapes, which in this context
                                     * we want to defer until the subsequent reinvocation of the frontend on this text block. */
case 48:
YY_RULE_SETUP
#line 767 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf.clear();
                                        yy_push_state(STRING_ACCUMULATE, yyscanner);
                                    }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 773 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 779 "ado.fl"
{
                                        R_ECHO(yytext);

                                        brace_count++;
                                        loop_buf += yytext[0];
                                    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 785 "ado.fl"
{
                                        // don't R_ECHO because we're going to unput the matched text to process again

                                        // This is not a mistake: it should be -1 rather than 0, because the brace_count
                                        // variable is set to 0 when yylex starts up, and we want to see one more closing
                                        // brace than we've seen opening braces. (Its matching opening brace is consumed
                                        // in the FOREACH or FORVALUES states before we get here, but setting brace_count
                                        // there won't persist to this invocation unless we do something not thread-safe 
                                        // and make brace_count static.)
                                        brace_count--;
                                        if(brace_count > -1)
                                        {
                                            loop_buf += yytext[0];
                                        } else if(brace_count == -1)
                                        {
                                            yy_pop_state(yyscanner); // back to FOREACH or FORVALUES
                                            yy_pop_state(yyscanner); // back to INITIAL

                                            unput(yytext[0]); // we want to re-scan this because the parser expects a "}"

                                            // construct a string literal token from loop_buf and return it
                                            std::string *s = new std::string(loop_buf);
                                            yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                            yylval->node->addData("value", *s);

                                            return token::TOK_STRING_LITERAL;
                                        } else // brace_count < -1
                                        {
                                            // too many braces
                                            do {
                                                yy_pop_state(yyscanner);
                                            } while(yy_top_state(yyscanner) != INITIAL);
                                            
                                            R_ERROR("Invalid statement body for loop");
                                            yyterminate();
                                        }
                                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 822 "ado.fl"
{
                                        R_ECHO(yytext);

                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(ACCUMULATE):
#line 828 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Loop statement without a closing brace");
                                        yyterminate();
                                    }
	YY_BREAK


/* Saw the matching close quote - all done */
case 53:
YY_RULE_SETUP
#line 843 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);

                                        yy_pop_state(yyscanner);
                                    }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 850 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 863 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 867 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 872 "ado.fl"
{
                                        // this rule is the entire reason for this state - it matches
                                        // opening curly braces but doesn't increment brace_count
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(STRING_ACCUMULATE):
#line 879 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK


/* Saw the matching close quote - all done */
case 58:
YY_RULE_SETUP
#line 894 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);

                                        yy_pop_state(yyscanner);
                                    }
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 901 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 906 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 919 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 923 "ado.fl"
{
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 928 "ado.fl"
{
                                        // once again, the fact that this rule matches the "{" character
                                        // but doesn't increment brace_count is why we have this state
                                        R_ECHO(yytext);
                                        loop_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(CDQUOTE_ACCUMULATE):
#line 935 "ado.fl"
{
                                        // getting to EOF in this state is an error
                                        do {
                                            yy_pop_state(yyscanner);
                                        } while(yy_top_state(yyscanner) != INITIAL);
                                        
                                        R_ERROR("Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK

/* Eat long comments */
case 64:
YY_RULE_SETUP
#line 949 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_push_state(LONG_COMMENT, yyscanner);
                                    }
	YY_BREAK

/* Got a close-comment marker, all done */
case 65:
YY_RULE_SETUP
#line 956 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_pop_state(yyscanner);
                                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 962 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        /* Eat this chunk of comment */
                                    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 967 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        /* Eat a single asterisk */
                                    }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 972 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng);
                                    }
	YY_BREAK
case YY_STATE_EOF(LONG_COMMENT):
#line 978 "ado.fl"
{
                                        yy_pop_state(yyscanner);
                                        R_ERROR("Unclosed comment");
                                        yyterminate();
                                    }
	YY_BREAK

/* Allow a triple slash at EOL as a line extender */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 988 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->lines(yyleng); llocp->step();
                                    }
	YY_BREAK
/* Eat short comments */
case 70:
YY_RULE_SETUP
#line 997 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1002 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_push_state(SHORT_COMMENT, yyscanner);
                                    }
	YY_BREAK

case 72:
YY_RULE_SETUP
#line 1008 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        /* eat anything but a newline */
                                    }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1013 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yy_pop_state(yyscanner);
                                        llocp->lines(1);
                                        return token::TOK_NEWLINE;
                                    }
	YY_BREAK
case YY_STATE_EOF(SHORT_COMMENT):
#line 1020 "ado.fl"
{
                                        // one-line comments can be the last thing in the file
                                        yy_pop_state(yyscanner);
                                        llocp->lines(1);
                                        
                                        // unput the newline that the grammar expects will be here
                                        unput('\n');
                                    }
	YY_BREAK

/* similarly, lines that start with "!" or "shell" are sh commands */
case 74:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1033 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::string n = s->substr(1, s->size());

                                        yylval->node = new ExprNode("ado_embedded_code");
                                        yylval->node->addData("value", n);
                                        yylval->node->addData("lang", "shell");
                                        return token::TOK_EMBEDDED_CODE;
                                    }
	YY_BREAK
case 75:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1044 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::string n = s->substr(5, s->size());

                                        yylval->node = new ExprNode("ado_embedded_code");
                                        yylval->node->addData("value", n);
                                        yylval->node->addData("type", "shell");
                                        return token::TOK_EMBEDDED_CODE;
                                    }
	YY_BREAK
/* Statement separators; consider more than one in a row to be one */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1059 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        llocp->lines(yyleng);
                                        return token::TOK_NEWLINE;
                                    }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1066 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_SEMICOLON;
                                    }
	YY_BREAK
/* ignore whitespace but track column numbers */
case 78:
YY_RULE_SETUP
#line 1074 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        llocp->step();
                                    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1081 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf.clear();
                                        yy_push_state(CDQUOTE, yyscanner);
                                    }
	YY_BREAK

/* Allow any type of macro to be nested here */
case 80:
YY_RULE_SETUP
#line 1089 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 81:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1098 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1107 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
/* Saw the matching close quote - all done */
case 83:
YY_RULE_SETUP
#line 1118 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(cdquote_buf);
                                        yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                        yylval->node->addData("value", *s);

                                        yy_pop_state(yyscanner);
                                        return token::TOK_STRING_LITERAL;
                                    }
	YY_BREAK
case 84:
/* rule 84 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1129 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += std::string(yytext);
                                    }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1135 "ado.fl"
{
                                        // this is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        cdquote_buf.clear();
                                        yy_pop_state(yyscanner);

                                        R_ERROR("Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1147 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '$';
                                    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1152 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '`';
                                    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1157 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\n';
                                    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1162 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\t';
                                    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1167 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\r';
                                    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1172 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\b';
                                    }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1177 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\f';
                                    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1182 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += yytext[1];
                                    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1187 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += '\\';
                                    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1193 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        cdquote_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(CDQUOTE):
#line 1199 "ado.fl"
{
                                        cdquote_buf.clear();
                                        yy_pop_state(yyscanner);

                                        R_ERROR("Unclosed compound double quote");
                                        yyterminate();
                                    }
	YY_BREAK

case 96:
YY_RULE_SETUP
#line 1208 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf.clear();
                                        yy_push_state(STRING, yyscanner);
                                    }
	YY_BREAK

/* Allow any type of macro to be nested here */
case 97:
YY_RULE_SETUP
#line 1216 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(LOCAL_MACRO, yyscanner);
                                    }
	YY_BREAK
case 98:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1225 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_ALPHA, yyscanner);
                                    }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1234 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        // create and push a stack frame
                                        std::vector<std::string> frame;
                                        macro_stack.push(frame);

                                        yy_push_state(GMACRO_BRACE, yyscanner);
                                    }
	YY_BREAK
/* Saw the matching close quote - all done */
case 100:
YY_RULE_SETUP
#line 1245 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(string_buf);
                                        yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                        yylval->node->addData("value", *s);

                                        yy_pop_state(yyscanner);
                                        return token::TOK_STRING_LITERAL;
                                    }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1256 "ado.fl"
{
                                        // this is an error
                                        R_ECHO(yytext);
                                        llocp->lines(yyleng);
                                        
                                        string_buf.clear();
                                        yy_pop_state(yyscanner);

                                        R_ERROR("Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1268 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '"';
                                    }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1273 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '`';
                                    }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1278 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '$';
                                    }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1283 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\n';
                                    }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1288 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\t';
                                    }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1293 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\r';
                                    }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1298 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\b';
                                    }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1303 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\f';
                                    }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1308 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += yytext[1];
                                    }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1313 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += '\\';
                                    }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1319 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        string_buf += std::string(yytext);
                                    }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 1325 "ado.fl"
{
                                        string_buf.clear();
                                        yy_pop_state(yyscanner);

                                        R_ERROR("Unclosed string literal");
                                        yyterminate();
                                    }
	YY_BREAK

/* datetime literals */
case 113:
YY_RULE_SETUP
#line 1337 "ado.fl"
{
                                       R_ECHO(yytext);
                                   
                                       yylval->node = new ExprNode({"ado_literal", "ado_datetime"});

                                       std::string *s = new std::string(yytext);
                                       s->append(" 00:00:00");

                                       yylval->node->addData("value", *s);
                                       return token::TOK_DATE;
                                   }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1348 "ado.fl"
{
                                                            R_ECHO(yytext);
                                        
                                                            yylval->node = new ExprNode({"ado_literal", "ado_datetime"});

                                                            std::string *s = new std::string(yytext);
                                                            yylval->node->addData("value", *s);
                                                            return token::TOK_DATETIME;
                                                        }
	YY_BREAK
/* format specifiers */
case 115:
YY_RULE_SETUP
#line 1361 "ado.fl"
{
                                        // numeric formats
                                        R_ECHO(yytext);
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        
                                        return token::TOK_NUMBER_FORMAT;
                                    }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1371 "ado.fl"
{
                                        R_ECHO(yytext);
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        
                                        return token::TOK_NUMBER_FORMAT;
                                    }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1380 "ado.fl"
{
                                        // string formats
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        return token::TOK_STRING_FORMAT;
                                    }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1390 "ado.fl"
{
                                        // datetime formats
                                        R_ECHO(yytext);
                                        yylval->node = new ExprNode({"ado_literal", "ado_format_spec"});

                                        std::string *s = new std::string(yytext);
                                        yylval->node->addData("value", *s);
                                        
                                        return token::TOK_DATETIME_FORMAT;
                                    }
	YY_BREAK
/* Numeric data types */
case 119:
YY_RULE_SETUP
#line 1404 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_BYTE;
                                    }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1410 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_INT;
                                    }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1416 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LONG;
                                    }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1422 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_FLOAT;
                                    }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1428 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_DOUBLE;
                                    }
	YY_BREAK
/* String data types */
case 124:
YY_RULE_SETUP
#line 1438 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STRING_TYPE_SPEC;
                                    }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1444 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STRING_TYPE_SPEC;
                                    }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1450 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STRING_TYPE_SPEC;
                                    }
	YY_BREAK
/* We need to specially lex this token to get it recognized,
                                     * before we lex numbers */
case 127:
YY_RULE_SETUP
#line 1459 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_ident"});

                                        yylval->node->addData("value", *(new std::string("tsls")));
                                        return token::TOK_TSLS;
                                    }
	YY_BREAK
/* numeric literals in their various formats */
case 128:
YY_RULE_SETUP
#line 1470 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_PERIOD;
                                    }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1478 "ado.fl"
{ /* hex */
                                        R_ECHO(yytext);
                                        
                                        // FIXME need hex floats
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1487 "ado.fl"
{ /* octal */
                                        R_ECHO(yytext);
                                        
                                        // FIXME need octal floats
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        // FIXME this should convert value to octal
                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1497 "ado.fl"
{ /* decimal integer */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});
                                        
                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 132:
/* rule 132 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1505 "ado.fl"
{ /* decimal float */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1513 "ado.fl"
{ /* scientific notation */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1521 "ado.fl"
{ /* scientific notation with fractions, or numbers like ".0239" */
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_number"});

                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_NUMBER;
                                    }
	YY_BREAK
/* Other keywords */
case 135:
YY_RULE_SETUP
#line 1533 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_USING;
                                    }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1539 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_IF;
                                    }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1545 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_IN;
                                    }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1551 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_string_literal"});
                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_MERGE_SPEC;
                                        }
	YY_BREAK
/* Weight-clause specifiers (this is a hack) */
case 139:
YY_RULE_SETUP
#line 1562 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *clause = new ExprNode("ado_weight_clause");
                                        ExprNode *kind = new ExprNode({"ado_literal", "ado_ident"});
                                        std::string *s = new std::string(yytext);

                                        // remove the first and last characters of the string
                                        s->pop_back();
                                        std::string n0 = s->substr(1, s->size());

                                        kind->addData("value", trim(n0));
                                        clause->appendChild("left", kind);

                                        yylval->node = clause;
                                        return token::TOK_WEIGHT_SPEC;
                                    }
	YY_BREAK
/* infix operators and various single-character tokens */
case 140:
YY_RULE_SETUP
#line 1583 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_AND_OP;
                                    }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1589 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_OR_OP;
                                    }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1595 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_GT_OP;
                                    }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1601 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LT_OP;
                                    }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1607 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_GE_OP;
                                    }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1613 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LE_OP;
                                    }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1619 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_EQ_OP;
                                    }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1625 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NE_OP;
                                    }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1631 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NE_OP;
                                    }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1637 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NEG_OP;
                                    }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1643 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_NEG_OP;
                                    }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1650 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_STAR;
                                    }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1656 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_PLUS;
                                    }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1662 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_SLASH;
                                    }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1668 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_MINUS;
                                    }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1674 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_CARET;
                                    }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1680 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_ASSIGN;
                                    }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1686 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACKET;
                                    }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1692 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_RBRACKET;
                                    }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1698 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LPAREN;
                                    }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1704 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_RPAREN;
                                    }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1710 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_LBRACE;
                                    }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1716 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_RBRACE;
                                    }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1722 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_COMMA;
                                    }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1728 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_COLON;
                                    }
	YY_BREAK
/* Factor variable operators and level-restricted virtual variables */
case 165:
YY_RULE_SETUP
#line 1736 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_continuous_expression"});
                                        yylval->node->addData("verb", "c.");

                                        return token::TOK_CONT_OPERATOR;
                                    }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1744 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1753 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "n");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1762 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "freq");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1771 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "last");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1780 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");
                                        yylval->node->addData("level", "first");

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1789 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");

                                        if(s->at(0) == 'i')
                                          yylval->node->addData("level", s->substr(2, s->length() - 1));
                                        else
                                          yylval->node->addData("level", s->substr(1, s->length() - 1));

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1804 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_baseline_expression"});
                                        yylval->node->addData("verb", "ib.");

                                        if(s->at(0) == 'i')
                                          yylval->node->addData("level", s->substr(4, s->length() - 2));
                                        else
                                          yylval->node->addData("level", s->substr(3, s->length() - 2));

                                        return token::TOK_BASE_OPERATOR;
                                    }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1820 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");
                                        yylval->node->addData("level", s->substr(1, s->length() - 1));

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1831 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x = split(s->substr(2, s->length() - 2), ' ');

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");

                                        for(auto elem : x)
                                        {
                                            if(!elem.empty())
                                                yylval->node->addData("level" + elem, elem); // hacky, but oh well
                                        }

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1848 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x = split(s->substr(2, s->length() -2), '/');
                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_indicator_expression"});
                                        yylval->node->addData("verb", "i.");

                                        yylval->node->addData("levelstart", trim(x[0]));
                                        yylval->node->addData("levelend", trim(x[1]));

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1862 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_omit_expression"});
                                        yylval->node->addData("verb", "o.");

                                        if(s->at(0) == 'i')
                                          yylval->node->addData("level", s->substr(2, s->length() - 1));
                                        else
                                          yylval->node->addData("level", s->substr(1, s->length() - 1));

                                        return token::TOK_OMIT_OPERATOR;
                                    }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1877 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x;

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_omit_expression"});
                                        yylval->node->addData("verb", "o.");

                                        if(s->at(0) == 'i')
                                            x = split(s->substr(3, s->length() -2), ' ');
                                        else
                                            x = split(s->substr(2, s->length() -2), ' ');

                                        for(auto elem : x)
                                        {
                                            if(!elem.empty())
                                                yylval->node->addData("level" + elem, elem); // hacky, but oh well
                                        }

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1899 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        std::string *s = new std::string(yytext);
                                        std::vector<std::string> x;

                                        yylval->node = new ExprNode({"ado_expression", "ado_factor_expression", "ado_omit_expression"});
                                        yylval->node->addData("verb", "o.");

                                        if(s->at(0) == 'i')
                                            x = split(s->substr(3, s->length() -2), '/');
                                        else
                                            x = split(s->substr(2, s->length() -2), '/');

                                        yylval->node->addData("levelstart", trim(x[0]));
                                        yylval->node->addData("levelend", trim(x[1]));

                                        return token::TOK_IND_OPERATOR;
                                    }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1919 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_FACT_CROSS;
                                    }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1925 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->str = new std::string(yytext);
                                        return token::TOK_CROSS;
                                    }
	YY_BREAK
/* command verbs that have to be hardcoded into the grammar */
case 181:
YY_RULE_SETUP
#line 1935 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_CAPTURE;
                                    }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1944 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", "capture");

                                        yylval->node = verb;
                                        return token::TOK_CAPTURE;
                                    }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1953 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_QUIETLY;
                                    }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1962 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", "quietly");

                                        yylval->node = verb;
                                        return token::TOK_QUIETLY;
                                    }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1971 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_NOISILY;
                                    }
	YY_BREAK
/* Non-prefix special commands */
case 186:
YY_RULE_SETUP
#line 1982 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_BY;
                                    }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1991 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_BYSORT;
                                    }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2000 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_XI;
                                    }
	YY_BREAK
/* Commands which have to be lexed and parsed differently because they
                                     * have idiosyncratic syntax */
case 189:
YY_RULE_SETUP
#line 2012 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_MERGE;
                                    }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2021 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_COLLAPSE;
                                    }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2030 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_RECODE;
                                    }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2039 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_IVREGRESS;
                                    }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2048 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_GSORT;
                                    }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2057 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_LRTEST;
                                    }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2066 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        ExprNode *verb = new ExprNode({"ado_literal", "ado_ident"});
                                        verb->addData("value", *(new std::string(yytext)));

                                        yylval->node = verb;
                                        return token::TOK_ANOVA;
                                    }
	YY_BREAK
/* all non-keyword identifiers */
case 196:
YY_RULE_SETUP
#line 2079 "ado.fl"
{
                                        R_ECHO(yytext);
                                        
                                        yylval->node = new ExprNode({"ado_literal", "ado_ident"});
                                        yylval->node->addData("value", *(new std::string(yytext)));
                                        return token::TOK_IDENT;
                                    }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2087 "ado.fl"
{
                                        R_ECHO(yytext);
                                        R_ERROR("Illegal character");
                                        yyterminate();
                                    }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 2093 "ado.fl"
{ return token::TOK_END; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2095 "ado.fl"
ECHO;
	YY_BREAK
#line 4273 "../lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 532 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 532 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 531);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yytext_ptr = 0;
    yyg->yy_more_offset = 0;
    yyg->yy_prev_more_offset = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2095 "ado.fl"


void
ado_yy_fatal_error(const char *msg)
{
    Rcpp::List cond;
    Rcpp::CharacterVector cls;

    cond["message"] = std::string(msg);
    cond["call"] = R_NilValue;
    
    cls = Rcpp::CharacterVector::create("error", "condition");
    
    cond.attr("class") = cls;
    Rcpp::Function stopper("stop");
    stopper(cond);
}

std::vector<std::string> &
split(const std::string &s, char delim, std::vector<std::string> &elems) {
    std::stringstream ss(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}

std::vector<std::string>
split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, elems);
    return elems;
}

std::string
trim(const std::string& str, const std::string& what)
{
    size_t start = str.find_first_not_of(what);
    size_t end = str.find_last_not_of(what);
    size_t len = end - start + 1;

    if (start == std::string::npos)
        return "";

    return str.substr(start, len);
}


